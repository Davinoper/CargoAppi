{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol.js\");\n\nrequire(\"core-js/modules/es.symbol.description.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.symbol.iterator.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.number.constructor.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _colorable = _interopRequireDefault(require(\"../colorable\"));\n\nvar _themeable = _interopRequireDefault(require(\"../themeable\"));\n\nvar _registrable = require(\"../registrable\");\n\nvar _helpers = require(\"../../util/helpers\");\n\nvar _console = require(\"../../util/console\");\n\nvar _mixins = _interopRequireDefault(require(\"../../util/mixins\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar baseMixins = (0, _mixins.default)(_colorable.default, (0, _registrable.inject)('form'), _themeable.default);\n/* @vue/component */\n\nvar _default2 = baseMixins.extend({\n  name: 'validatable',\n  props: {\n    disabled: Boolean,\n    error: Boolean,\n    errorCount: {\n      type: [Number, String],\n      default: 1\n    },\n    errorMessages: {\n      type: [String, Array],\n      default: function _default() {\n        return [];\n      }\n    },\n    messages: {\n      type: [String, Array],\n      default: function _default() {\n        return [];\n      }\n    },\n    readonly: Boolean,\n    rules: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    success: Boolean,\n    successMessages: {\n      type: [String, Array],\n      default: function _default() {\n        return [];\n      }\n    },\n    validateOnBlur: Boolean,\n    value: {\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      errorBucket: [],\n      hasColor: false,\n      hasFocused: false,\n      hasInput: false,\n      isFocused: false,\n      isResetting: false,\n      lazyValue: this.value,\n      valid: false\n    };\n  },\n  computed: {\n    computedColor: function computedColor() {\n      if (this.isDisabled) return undefined;\n      if (this.color) return this.color; // It's assumed that if the input is on a\n      // dark background, the user will want to\n      // have a white color. If the entire app\n      // is setup to be dark, then they will\n      // like want to use their primary color\n\n      if (this.isDark && !this.appIsDark) return 'white';else return 'primary';\n    },\n    hasError: function hasError() {\n      return this.internalErrorMessages.length > 0 || this.errorBucket.length > 0 || this.error;\n    },\n    // TODO: Add logic that allows the user to enable based\n    // upon a good validation\n    hasSuccess: function hasSuccess() {\n      return this.internalSuccessMessages.length > 0 || this.success;\n    },\n    externalError: function externalError() {\n      return this.internalErrorMessages.length > 0 || this.error;\n    },\n    hasMessages: function hasMessages() {\n      return this.validationTarget.length > 0;\n    },\n    hasState: function hasState() {\n      if (this.isDisabled) return false;\n      return this.hasSuccess || this.shouldValidate && this.hasError;\n    },\n    internalErrorMessages: function internalErrorMessages() {\n      return this.genInternalMessages(this.errorMessages);\n    },\n    internalMessages: function internalMessages() {\n      return this.genInternalMessages(this.messages);\n    },\n    internalSuccessMessages: function internalSuccessMessages() {\n      return this.genInternalMessages(this.successMessages);\n    },\n    internalValue: {\n      get: function get() {\n        return this.lazyValue;\n      },\n      set: function set(val) {\n        this.lazyValue = val;\n        this.$emit('input', val);\n      }\n    },\n    isDisabled: function isDisabled() {\n      return this.disabled || !!this.form && this.form.disabled;\n    },\n    isInteractive: function isInteractive() {\n      return !this.isDisabled && !this.isReadonly;\n    },\n    isReadonly: function isReadonly() {\n      return this.readonly || !!this.form && this.form.readonly;\n    },\n    shouldValidate: function shouldValidate() {\n      if (this.externalError) return true;\n      if (this.isResetting) return false;\n      return this.validateOnBlur ? this.hasFocused && !this.isFocused : this.hasInput || this.hasFocused;\n    },\n    validations: function validations() {\n      return this.validationTarget.slice(0, Number(this.errorCount));\n    },\n    validationState: function validationState() {\n      if (this.isDisabled) return undefined;\n      if (this.hasError && this.shouldValidate) return 'error';\n      if (this.hasSuccess) return 'success';\n      if (this.hasColor) return this.computedColor;\n      return undefined;\n    },\n    validationTarget: function validationTarget() {\n      if (this.internalErrorMessages.length > 0) {\n        return this.internalErrorMessages;\n      } else if (this.successMessages && this.successMessages.length > 0) {\n        return this.internalSuccessMessages;\n      } else if (this.messages && this.messages.length > 0) {\n        return this.internalMessages;\n      } else if (this.shouldValidate) {\n        return this.errorBucket;\n      } else return [];\n    }\n  },\n  watch: {\n    rules: {\n      handler: function handler(newVal, oldVal) {\n        if ((0, _helpers.deepEqual)(newVal, oldVal)) return;\n        this.validate();\n      },\n      deep: true\n    },\n    internalValue: function internalValue() {\n      // If it's the first time we're setting input,\n      // mark it with hasInput\n      this.hasInput = true;\n      this.validateOnBlur || this.$nextTick(this.validate);\n    },\n    isFocused: function isFocused(val) {\n      // Should not check validation\n      // if disabled\n      if (!val && !this.isDisabled) {\n        this.hasFocused = true;\n        this.validateOnBlur && this.$nextTick(this.validate);\n      }\n    },\n    isResetting: function isResetting() {\n      var _this = this;\n\n      setTimeout(function () {\n        _this.hasInput = false;\n        _this.hasFocused = false;\n        _this.isResetting = false;\n\n        _this.validate();\n      }, 0);\n    },\n    hasError: function hasError(val) {\n      if (this.shouldValidate) {\n        this.$emit('update:error', val);\n      }\n    },\n    value: function value(val) {\n      this.lazyValue = val;\n    }\n  },\n  beforeMount: function beforeMount() {\n    this.validate();\n  },\n  created: function created() {\n    this.form && this.form.register(this);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.form && this.form.unregister(this);\n  },\n  methods: {\n    genInternalMessages: function genInternalMessages(messages) {\n      if (!messages) return [];else if (Array.isArray(messages)) return messages;else return [messages];\n    },\n\n    /** @public */\n    reset: function reset() {\n      this.isResetting = true;\n      this.internalValue = Array.isArray(this.internalValue) ? [] : null;\n    },\n\n    /** @public */\n    resetValidation: function resetValidation() {\n      this.isResetting = true;\n    },\n\n    /** @public */\n    validate: function validate() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var value = arguments.length > 1 ? arguments[1] : undefined;\n      var errorBucket = [];\n      value = value || this.internalValue;\n      if (force) this.hasInput = this.hasFocused = true;\n\n      for (var index = 0; index < this.rules.length; index++) {\n        var rule = this.rules[index];\n        var valid = typeof rule === 'function' ? rule(value) : rule;\n\n        if (valid === false || typeof valid === 'string') {\n          errorBucket.push(valid || '');\n        } else if (typeof valid !== 'boolean') {\n          (0, _console.consoleError)(\"Rules should return a string or boolean, received '\".concat(_typeof(valid), \"' instead\"), this);\n        }\n      }\n\n      this.errorBucket = errorBucket;\n      this.valid = errorBucket.length === 0;\n      return this.valid;\n    }\n  }\n});\n\nexports.default = _default2;","map":{"version":3,"mappings":"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","names":["baseMixins","_colorable","_themeable","extend","name","props","disabled","Boolean","error","errorCount","type","Number","String","default","errorMessages","Array","messages","readonly","rules","success","successMessages","validateOnBlur","value","required","data","errorBucket","hasColor","hasFocused","hasInput","isFocused","isResetting","lazyValue","valid","computed","computedColor","isDisabled","undefined","color","isDark","appIsDark","hasError","internalErrorMessages","length","hasSuccess","internalSuccessMessages","externalError","hasMessages","validationTarget","hasState","shouldValidate","genInternalMessages","internalMessages","internalValue","get","set","val","$emit","form","isInteractive","isReadonly","validations","slice","validationState","watch","handler","newVal","oldVal","validate","deep","$nextTick","setTimeout","_this","beforeMount","created","register","beforeDestroy","unregister","methods","isArray","reset","resetValidation","force","index","rule","push"],"sourceRoot":"","sources":["../../../src/mixins/validatable/index.ts"],"sourcesContent":["// Mixins\nimport Colorable from '../colorable'\nimport Themeable from '../themeable'\nimport { inject as RegistrableInject } from '../registrable'\n\n// Utilities\nimport { deepEqual } from '../../util/helpers'\nimport { consoleError } from '../../util/console'\nimport mixins from '../../util/mixins'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\nimport { InputMessage, InputValidationRules } from 'vuetify/types'\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject<'form', any>('form'),\n  Themeable,\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'validatable',\n\n  props: {\n    disabled: Boolean,\n    error: Boolean,\n    errorCount: {\n      type: [Number, String],\n      default: 1,\n    },\n    errorMessages: {\n      type: [String, Array],\n      default: () => [],\n    } as PropValidator<InputMessage | null>,\n    messages: {\n      type: [String, Array],\n      default: () => [],\n    } as PropValidator<InputMessage | null>,\n    readonly: Boolean,\n    rules: {\n      type: Array,\n      default: () => [],\n    } as PropValidator<InputValidationRules>,\n    success: Boolean,\n    successMessages: {\n      type: [String, Array],\n      default: () => [],\n    } as PropValidator<InputMessage | null>,\n    validateOnBlur: Boolean,\n    value: { required: false },\n  },\n\n  data () {\n    return {\n      errorBucket: [] as string[],\n      hasColor: false,\n      hasFocused: false,\n      hasInput: false,\n      isFocused: false,\n      isResetting: false,\n      lazyValue: this.value,\n      valid: false,\n    }\n  },\n\n  computed: {\n    computedColor (): string | undefined {\n      if (this.isDisabled) return undefined\n      if (this.color) return this.color\n      // It's assumed that if the input is on a\n      // dark background, the user will want to\n      // have a white color. If the entire app\n      // is setup to be dark, then they will\n      // like want to use their primary color\n      if (this.isDark && !this.appIsDark) return 'white'\n      else return 'primary'\n    },\n    hasError (): boolean {\n      return (\n        this.internalErrorMessages.length > 0 ||\n        this.errorBucket.length > 0 ||\n        this.error\n      )\n    },\n    // TODO: Add logic that allows the user to enable based\n    // upon a good validation\n    hasSuccess (): boolean {\n      return (\n        this.internalSuccessMessages.length > 0 ||\n        this.success\n      )\n    },\n    externalError (): boolean {\n      return this.internalErrorMessages.length > 0 || this.error\n    },\n    hasMessages (): boolean {\n      return this.validationTarget.length > 0\n    },\n    hasState (): boolean {\n      if (this.isDisabled) return false\n\n      return (\n        this.hasSuccess ||\n        (this.shouldValidate && this.hasError)\n      )\n    },\n    internalErrorMessages (): InputValidationRules {\n      return this.genInternalMessages(this.errorMessages)\n    },\n    internalMessages (): InputValidationRules {\n      return this.genInternalMessages(this.messages)\n    },\n    internalSuccessMessages (): InputValidationRules {\n      return this.genInternalMessages(this.successMessages)\n    },\n    internalValue: {\n      get (): unknown {\n        return this.lazyValue\n      },\n      set (val: any) {\n        this.lazyValue = val\n\n        this.$emit('input', val)\n      },\n    },\n    isDisabled (): boolean {\n      return this.disabled || (\n        !!this.form &&\n        this.form.disabled\n      )\n    },\n    isInteractive (): boolean {\n      return !this.isDisabled && !this.isReadonly\n    },\n    isReadonly (): boolean {\n      return this.readonly || (\n        !!this.form &&\n        this.form.readonly\n      )\n    },\n    shouldValidate (): boolean {\n      if (this.externalError) return true\n      if (this.isResetting) return false\n\n      return this.validateOnBlur\n        ? this.hasFocused && !this.isFocused\n        : (this.hasInput || this.hasFocused)\n    },\n    validations (): InputValidationRules {\n      return this.validationTarget.slice(0, Number(this.errorCount))\n    },\n    validationState (): string | undefined {\n      if (this.isDisabled) return undefined\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess) return 'success'\n      if (this.hasColor) return this.computedColor\n      return undefined\n    },\n    validationTarget (): InputValidationRules {\n      if (this.internalErrorMessages.length > 0) {\n        return this.internalErrorMessages\n      } else if (this.successMessages && this.successMessages.length > 0) {\n        return this.internalSuccessMessages\n      } else if (this.messages && this.messages.length > 0) {\n        return this.internalMessages\n      } else if (this.shouldValidate) {\n        return this.errorBucket\n      } else return []\n    },\n  },\n\n  watch: {\n    rules: {\n      handler (newVal, oldVal) {\n        if (deepEqual(newVal, oldVal)) return\n        this.validate()\n      },\n      deep: true,\n    },\n    internalValue () {\n      // If it's the first time we're setting input,\n      // mark it with hasInput\n      this.hasInput = true\n      this.validateOnBlur || this.$nextTick(this.validate)\n    },\n    isFocused (val) {\n      // Should not check validation\n      // if disabled\n      if (\n        !val &&\n        !this.isDisabled\n      ) {\n        this.hasFocused = true\n        this.validateOnBlur && this.$nextTick(this.validate)\n      }\n    },\n    isResetting () {\n      setTimeout(() => {\n        this.hasInput = false\n        this.hasFocused = false\n        this.isResetting = false\n        this.validate()\n      }, 0)\n    },\n    hasError (val) {\n      if (this.shouldValidate) {\n        this.$emit('update:error', val)\n      }\n    },\n    value (val) {\n      this.lazyValue = val\n    },\n  },\n\n  beforeMount () {\n    this.validate()\n  },\n\n  created () {\n    this.form && this.form.register(this)\n  },\n\n  beforeDestroy () {\n    this.form && this.form.unregister(this)\n  },\n\n  methods: {\n    genInternalMessages (messages: InputMessage | null): InputValidationRules {\n      if (!messages) return []\n      else if (Array.isArray(messages)) return messages\n      else return [messages]\n    },\n    /** @public */\n    reset () {\n      this.isResetting = true\n      this.internalValue = Array.isArray(this.internalValue)\n        ? []\n        : null\n    },\n    /** @public */\n    resetValidation () {\n      this.isResetting = true\n    },\n    /** @public */\n    validate (force = false, value?: any): boolean {\n      const errorBucket = []\n      value = value || this.internalValue\n\n      if (force) this.hasInput = this.hasFocused = true\n\n      for (let index = 0; index < this.rules.length; index++) {\n        const rule = this.rules[index]\n        const valid = typeof rule === 'function' ? rule(value) : rule\n\n        if (valid === false || typeof valid === 'string') {\n          errorBucket.push(valid || '')\n        } else if (typeof valid !== 'boolean') {\n          consoleError(`Rules should return a string or boolean, received '${typeof valid}' instead`, this)\n        }\n      }\n\n      this.errorBucket = errorBucket\n      this.valid = errorBucket.length === 0\n\n      return this.valid\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"script"}