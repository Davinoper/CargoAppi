{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _calendarBase = _interopRequireDefault(require(\"./calendar-base\"));\n\nvar _props = _interopRequireDefault(require(\"../util/props\"));\n\nvar _timestamp = require(\"../util/timestamp\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Mixins\n// Util\n\n/* @vue/component */\n\n\nvar _default = _calendarBase.default.extend({\n  name: 'calendar-with-intervals',\n  props: _props.default.intervals,\n  computed: {\n    parsedFirstInterval: function parsedFirstInterval() {\n      return parseInt(this.firstInterval);\n    },\n    parsedIntervalMinutes: function parsedIntervalMinutes() {\n      return parseInt(this.intervalMinutes);\n    },\n    parsedIntervalCount: function parsedIntervalCount() {\n      return parseInt(this.intervalCount);\n    },\n    parsedIntervalHeight: function parsedIntervalHeight() {\n      return parseFloat(this.intervalHeight);\n    },\n    parsedFirstTime: function parsedFirstTime() {\n      return (0, _timestamp.parseTime)(this.firstTime);\n    },\n    firstMinute: function firstMinute() {\n      var time = this.parsedFirstTime;\n      return time !== false && time >= 0 && time <= _timestamp.MINUTES_IN_DAY ? time : this.parsedFirstInterval * this.parsedIntervalMinutes;\n    },\n    bodyHeight: function bodyHeight() {\n      return this.parsedIntervalCount * this.parsedIntervalHeight;\n    },\n    days: function days() {\n      return (0, _timestamp.createDayList)(this.parsedStart, this.parsedEnd, this.times.today, this.weekdaySkips, this.maxDays);\n    },\n    intervals: function intervals() {\n      var days = this.days;\n      var first = this.firstMinute;\n      var minutes = this.parsedIntervalMinutes;\n      var count = this.parsedIntervalCount;\n      var now = this.times.now;\n      return days.map(function (d) {\n        return (0, _timestamp.createIntervalList)(d, first, minutes, count, now);\n      });\n    },\n    intervalFormatter: function intervalFormatter() {\n      if (this.intervalFormat) {\n        return this.intervalFormat;\n      }\n\n      var longOptions = {\n        timeZone: 'UTC',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      var shortOptions = {\n        timeZone: 'UTC',\n        hour: 'numeric',\n        minute: '2-digit'\n      };\n      var shortHourOptions = {\n        timeZone: 'UTC',\n        hour: 'numeric'\n      };\n      return (0, _timestamp.createNativeLocaleFormatter)(this.currentLocale, function (tms, short) {\n        return short ? tms.minute === 0 ? shortHourOptions : shortOptions : longOptions;\n      });\n    }\n  },\n  methods: {\n    showIntervalLabelDefault: function showIntervalLabelDefault(interval) {\n      var first = this.intervals[0][0];\n      var isFirst = first.hour === interval.hour && first.minute === interval.minute;\n      return !isFirst;\n    },\n    intervalStyleDefault: function intervalStyleDefault(_interval) {\n      return undefined;\n    },\n    getTimestampAtEvent: function getTimestampAtEvent(e, day) {\n      var timestamp = (0, _timestamp.copyTimestamp)(day);\n      var bounds = e.currentTarget.getBoundingClientRect();\n      var baseMinutes = this.firstMinute;\n      var touchEvent = e;\n      var mouseEvent = e;\n      var touches = touchEvent.changedTouches || touchEvent.touches;\n      var clientY = touches && touches[0] ? touches[0].clientY : mouseEvent.clientY;\n      var addIntervals = (clientY - bounds.top) / this.parsedIntervalHeight;\n      var addMinutes = Math.floor(addIntervals * this.parsedIntervalMinutes);\n      var minutes = baseMinutes + addMinutes;\n      return (0, _timestamp.updateMinutes)(timestamp, minutes, this.times.now);\n    },\n    getSlotScope: function getSlotScope(timestamp) {\n      var scope = (0, _timestamp.copyTimestamp)(timestamp);\n      scope.timeToY = this.timeToY;\n      scope.timeDelta = this.timeDelta;\n      scope.minutesToPixels = this.minutesToPixels;\n      scope.week = this.days;\n      return scope;\n    },\n    scrollToTime: function scrollToTime(time) {\n      var y = this.timeToY(time);\n      var pane = this.$refs.scrollArea;\n\n      if (y === false || !pane) {\n        return false;\n      }\n\n      pane.scrollTop = y;\n      return true;\n    },\n    minutesToPixels: function minutesToPixels(minutes) {\n      return minutes / this.parsedIntervalMinutes * this.parsedIntervalHeight;\n    },\n    timeToY: function timeToY(time) {\n      var clamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var y = this.timeDelta(time);\n\n      if (y !== false) {\n        y *= this.bodyHeight;\n\n        if (clamp) {\n          if (y < 0) {\n            y = 0;\n          }\n\n          if (y > this.bodyHeight) {\n            y = this.bodyHeight;\n          }\n        }\n      }\n\n      return y;\n    },\n    timeDelta: function timeDelta(time) {\n      var minutes = (0, _timestamp.parseTime)(time);\n\n      if (minutes === false) {\n        return false;\n      }\n\n      var min = this.firstMinute;\n      var gap = this.parsedIntervalCount * this.parsedIntervalMinutes;\n      return (minutes - min) / gap;\n    }\n  }\n});\n\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["_calendarBase","extend","name","props","_props","intervals","computed","parsedFirstInterval","parseInt","firstInterval","parsedIntervalMinutes","intervalMinutes","parsedIntervalCount","intervalCount","parsedIntervalHeight","parseFloat","intervalHeight","parsedFirstTime","firstTime","firstMinute","time","_timestamp","bodyHeight","days","parsedStart","parsedEnd","times","today","weekdaySkips","maxDays","first","minutes","count","now","map","d","intervalFormatter","intervalFormat","longOptions","timeZone","hour","minute","shortOptions","shortHourOptions","currentLocale","tms","short","methods","showIntervalLabelDefault","interval","isFirst","intervalStyleDefault","_interval","undefined","getTimestampAtEvent","e","day","timestamp","bounds","currentTarget","getBoundingClientRect","baseMinutes","touchEvent","mouseEvent","touches","changedTouches","clientY","addIntervals","top","addMinutes","Math","floor","getSlotScope","scope","timeToY","timeDelta","minutesToPixels","week","scrollToTime","y","pane","$refs","scrollArea","scrollTop","clamp","min","gap"],"sourceRoot":"","sources":["../../../../src/components/VCalendar/mixins/calendar-with-intervals.ts"],"sourcesContent":["\n// Mixins\nimport CalendarBase from './calendar-base'\n\n// Util\nimport props from '../util/props'\nimport {\n  parseTime,\n  copyTimestamp,\n  updateMinutes,\n  createDayList,\n  createIntervalList,\n  createNativeLocaleFormatter,\n  VTime,\n  MINUTES_IN_DAY,\n} from '../util/timestamp'\nimport { CalendarTimestamp, CalendarFormatter, CalendarDayBodySlotScope } from 'vuetify/types'\n\n/* @vue/component */\nexport default CalendarBase.extend({\n  name: 'calendar-with-intervals',\n\n  props: props.intervals,\n\n  computed: {\n    parsedFirstInterval (): number {\n      return parseInt(this.firstInterval)\n    },\n    parsedIntervalMinutes (): number {\n      return parseInt(this.intervalMinutes)\n    },\n    parsedIntervalCount (): number {\n      return parseInt(this.intervalCount)\n    },\n    parsedIntervalHeight (): number {\n      return parseFloat(this.intervalHeight)\n    },\n    parsedFirstTime (): number | false {\n      return parseTime(this.firstTime)\n    },\n    firstMinute (): number {\n      const time = this.parsedFirstTime\n\n      return time !== false && time >= 0 && time <= MINUTES_IN_DAY\n        ? time\n        : this.parsedFirstInterval * this.parsedIntervalMinutes\n    },\n    bodyHeight (): number {\n      return this.parsedIntervalCount * this.parsedIntervalHeight\n    },\n    days (): CalendarTimestamp[] {\n      return createDayList(\n        this.parsedStart,\n        this.parsedEnd,\n        this.times.today,\n        this.weekdaySkips,\n        this.maxDays\n      )\n    },\n    intervals (): CalendarTimestamp[][] {\n      const days: CalendarTimestamp[] = this.days\n      const first: number = this.firstMinute\n      const minutes: number = this.parsedIntervalMinutes\n      const count: number = this.parsedIntervalCount\n      const now: CalendarTimestamp = this.times.now\n\n      return days.map(d => createIntervalList(d, first, minutes, count, now))\n    },\n    intervalFormatter (): CalendarFormatter {\n      if (this.intervalFormat) {\n        return this.intervalFormat as CalendarFormatter\n      }\n\n      const longOptions = { timeZone: 'UTC', hour: '2-digit', minute: '2-digit' }\n      const shortOptions = { timeZone: 'UTC', hour: 'numeric', minute: '2-digit' }\n      const shortHourOptions = { timeZone: 'UTC', hour: 'numeric' }\n\n      return createNativeLocaleFormatter(\n        this.currentLocale,\n        (tms, short) => short ? (tms.minute === 0 ? shortHourOptions : shortOptions) : longOptions\n      )\n    },\n  },\n\n  methods: {\n    showIntervalLabelDefault (interval: CalendarTimestamp): boolean {\n      const first: CalendarTimestamp = this.intervals[0][0]\n      const isFirst: boolean = first.hour === interval.hour && first.minute === interval.minute\n      return !isFirst\n    },\n    intervalStyleDefault (_interval: CalendarTimestamp): object | undefined {\n      return undefined\n    },\n    getTimestampAtEvent (e: MouseEvent | TouchEvent, day: CalendarTimestamp): CalendarTimestamp {\n      const timestamp: CalendarTimestamp = copyTimestamp(day)\n      const bounds = (e.currentTarget as HTMLElement).getBoundingClientRect()\n      const baseMinutes: number = this.firstMinute\n      const touchEvent: TouchEvent = e as TouchEvent\n      const mouseEvent: MouseEvent = e as MouseEvent\n      const touches: TouchList = touchEvent.changedTouches || touchEvent.touches\n      const clientY: number = touches && touches[0] ? touches[0].clientY : mouseEvent.clientY\n      const addIntervals: number = (clientY - bounds.top) / this.parsedIntervalHeight\n      const addMinutes: number = Math.floor(addIntervals * this.parsedIntervalMinutes)\n      const minutes: number = baseMinutes + addMinutes\n\n      return updateMinutes(timestamp, minutes, this.times.now)\n    },\n    getSlotScope (timestamp: CalendarTimestamp): CalendarDayBodySlotScope {\n      const scope = copyTimestamp(timestamp) as any\n      scope.timeToY = this.timeToY\n      scope.timeDelta = this.timeDelta\n      scope.minutesToPixels = this.minutesToPixels\n      scope.week = this.days\n      return scope\n    },\n    scrollToTime (time: VTime): boolean {\n      const y = this.timeToY(time)\n      const pane = this.$refs.scrollArea as HTMLElement\n\n      if (y === false || !pane) {\n        return false\n      }\n\n      pane.scrollTop = y\n\n      return true\n    },\n    minutesToPixels (minutes: number): number {\n      return minutes / this.parsedIntervalMinutes * this.parsedIntervalHeight\n    },\n    timeToY (time: VTime, clamp = true): number | false {\n      let y = this.timeDelta(time)\n\n      if (y !== false) {\n        y *= this.bodyHeight\n\n        if (clamp) {\n          if (y < 0) {\n            y = 0\n          }\n          if (y > this.bodyHeight) {\n            y = this.bodyHeight\n          }\n        }\n      }\n\n      return y\n    },\n    timeDelta (time: VTime): number | false {\n      const minutes = parseTime(time)\n\n      if (minutes === false) {\n        return false\n      }\n\n      const min: number = this.firstMinute\n      const gap: number = this.parsedIntervalCount * this.parsedIntervalMinutes\n\n      return (minutes - min) / gap\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"script"}