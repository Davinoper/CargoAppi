{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nrequire(\"core-js/modules/es.array.from.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nrequire(\"core-js/modules/es.symbol.js\");\n\nrequire(\"core-js/modules/es.symbol.description.js\");\n\nrequire(\"core-js/modules/es.symbol.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.object.keys.js\");\n\nrequire(\"core-js/modules/es.array.filter.js\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor.js\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptors.js\");\n\nrequire(\"core-js/modules/es.array.includes.js\");\n\nrequire(\"core-js/modules/es.number.constructor.js\");\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.VTreeviewNodeProps = void 0;\n\nvar _transitions = require(\"../transitions\");\n\nvar _VIcon = require(\"../VIcon\");\n\nvar _registrable = require(\"../../mixins/registrable\");\n\nvar _colorable = _interopRequireDefault(require(\"../../mixins/colorable\"));\n\nvar _mixins = _interopRequireDefault(require(\"../../util/mixins\"));\n\nvar _helpers = require(\"../../util/helpers\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar baseMixins = (0, _mixins.default)(_colorable.default, (0, _registrable.inject)('treeview'));\nvar VTreeviewNodeProps = {\n  activatable: Boolean,\n  activeClass: {\n    type: String,\n    default: 'v-treeview-node--active'\n  },\n  color: {\n    type: String,\n    default: 'primary'\n  },\n  disablePerNode: Boolean,\n  expandIcon: {\n    type: String,\n    default: '$subgroup'\n  },\n  indeterminateIcon: {\n    type: String,\n    default: '$checkboxIndeterminate'\n  },\n  itemChildren: {\n    type: String,\n    default: 'children'\n  },\n  itemDisabled: {\n    type: String,\n    default: 'disabled'\n  },\n  itemKey: {\n    type: String,\n    default: 'id'\n  },\n  itemText: {\n    type: String,\n    default: 'name'\n  },\n  loadChildren: Function,\n  loadingIcon: {\n    type: String,\n    default: '$loading'\n  },\n  offIcon: {\n    type: String,\n    default: '$checkboxOff'\n  },\n  onIcon: {\n    type: String,\n    default: '$checkboxOn'\n  },\n  openOnClick: Boolean,\n  rounded: Boolean,\n  selectable: Boolean,\n  selectedColor: {\n    type: String,\n    default: 'accent'\n  },\n  shaped: Boolean,\n  transition: Boolean,\n  selectionType: {\n    type: String,\n    default: 'leaf',\n    validator: function validator(v) {\n      return ['leaf', 'independent'].includes(v);\n    }\n  }\n};\n/* @vue/component */\n\nexports.VTreeviewNodeProps = VTreeviewNodeProps;\nvar VTreeviewNode = baseMixins.extend().extend({\n  name: 'v-treeview-node',\n  inject: {\n    treeview: {\n      default: null\n    }\n  },\n  props: _objectSpread({\n    level: Number,\n    item: {\n      type: Object,\n      default: function _default() {\n        return null;\n      }\n    },\n    parentIsDisabled: Boolean\n  }, VTreeviewNodeProps),\n  data: function data() {\n    return {\n      hasLoaded: false,\n      isActive: false,\n      isIndeterminate: false,\n      isLoading: false,\n      isOpen: false,\n      isSelected: false\n    };\n  },\n  computed: {\n    disabled: function disabled() {\n      return (0, _helpers.getObjectValueByPath)(this.item, this.itemDisabled) || !this.disablePerNode && this.parentIsDisabled && this.selectionType === 'leaf';\n    },\n    key: function key() {\n      return (0, _helpers.getObjectValueByPath)(this.item, this.itemKey);\n    },\n    children: function children() {\n      var _this = this;\n\n      var children = (0, _helpers.getObjectValueByPath)(this.item, this.itemChildren);\n      return children && children.filter(function (child) {\n        return !_this.treeview.isExcluded((0, _helpers.getObjectValueByPath)(child, _this.itemKey));\n      });\n    },\n    text: function text() {\n      return (0, _helpers.getObjectValueByPath)(this.item, this.itemText);\n    },\n    scopedProps: function scopedProps() {\n      return {\n        item: this.item,\n        leaf: !this.children,\n        selected: this.isSelected,\n        indeterminate: this.isIndeterminate,\n        active: this.isActive,\n        open: this.isOpen\n      };\n    },\n    computedIcon: function computedIcon() {\n      if (this.isIndeterminate) return this.indeterminateIcon;else if (this.isSelected) return this.onIcon;else return this.offIcon;\n    },\n    hasChildren: function hasChildren() {\n      return !!this.children && (!!this.children.length || !!this.loadChildren);\n    }\n  },\n  created: function created() {\n    this.treeview.register(this);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.treeview.unregister(this);\n  },\n  methods: {\n    checkChildren: function checkChildren() {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        // TODO: Potential issue with always trying\n        // to load children if response is empty?\n        if (!_this2.children || _this2.children.length || !_this2.loadChildren || _this2.hasLoaded) return resolve();\n        _this2.isLoading = true;\n        resolve(_this2.loadChildren(_this2.item));\n      }).then(function () {\n        _this2.isLoading = false;\n        _this2.hasLoaded = true;\n      });\n    },\n    open: function open() {\n      this.isOpen = !this.isOpen;\n      this.treeview.updateOpen(this.key, this.isOpen);\n      this.treeview.emitOpen();\n    },\n    genLabel: function genLabel() {\n      var children = [];\n      if (this.$scopedSlots.label) children.push(this.$scopedSlots.label(this.scopedProps));else children.push(this.text);\n      return this.$createElement('div', {\n        slot: 'label',\n        staticClass: 'v-treeview-node__label'\n      }, children);\n    },\n    genPrependSlot: function genPrependSlot() {\n      if (!this.$scopedSlots.prepend) return null;\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__prepend'\n      }, this.$scopedSlots.prepend(this.scopedProps));\n    },\n    genAppendSlot: function genAppendSlot() {\n      if (!this.$scopedSlots.append) return null;\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__append'\n      }, this.$scopedSlots.append(this.scopedProps));\n    },\n    genContent: function genContent() {\n      var children = [this.genPrependSlot(), this.genLabel(), this.genAppendSlot()];\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__content'\n      }, children);\n    },\n    genToggle: function genToggle() {\n      var _this3 = this;\n\n      return this.$createElement(_VIcon.VIcon, {\n        staticClass: 'v-treeview-node__toggle',\n        class: {\n          'v-treeview-node__toggle--open': this.isOpen,\n          'v-treeview-node__toggle--loading': this.isLoading\n        },\n        slot: 'prepend',\n        on: {\n          click: function click(e) {\n            e.stopPropagation();\n            if (_this3.isLoading) return;\n\n            _this3.checkChildren().then(function () {\n              return _this3.open();\n            });\n          }\n        }\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon]);\n    },\n    genCheckbox: function genCheckbox() {\n      var _this4 = this;\n\n      return this.$createElement(_VIcon.VIcon, {\n        staticClass: 'v-treeview-node__checkbox',\n        props: {\n          color: this.isSelected || this.isIndeterminate ? this.selectedColor : undefined,\n          disabled: this.disabled\n        },\n        on: {\n          click: function click(e) {\n            e.stopPropagation();\n            if (_this4.isLoading) return;\n\n            _this4.checkChildren().then(function () {\n              // We nextTick here so that items watch in VTreeview has a chance to run first\n              _this4.$nextTick(function () {\n                _this4.isSelected = !_this4.isSelected;\n                _this4.isIndeterminate = false;\n\n                _this4.treeview.updateSelected(_this4.key, _this4.isSelected);\n\n                _this4.treeview.emitSelected();\n              });\n            });\n          }\n        }\n      }, [this.computedIcon]);\n    },\n    genLevel: function genLevel(level) {\n      var _this5 = this;\n\n      return (0, _helpers.createRange)(level).map(function () {\n        return _this5.$createElement('div', {\n          staticClass: 'v-treeview-node__level'\n        });\n      });\n    },\n    genNode: function genNode() {\n      var _this6 = this;\n\n      var children = [this.genContent()];\n      if (this.selectable) children.unshift(this.genCheckbox());\n\n      if (this.hasChildren) {\n        children.unshift(this.genToggle());\n      } else {\n        children.unshift.apply(children, _toConsumableArray(this.genLevel(1)));\n      }\n\n      children.unshift.apply(children, _toConsumableArray(this.genLevel(this.level)));\n      return this.$createElement('div', this.setTextColor(this.isActive && this.color, {\n        staticClass: 'v-treeview-node__root',\n        class: _defineProperty({}, this.activeClass, this.isActive),\n        on: {\n          click: function click() {\n            if (_this6.openOnClick && _this6.hasChildren) {\n              _this6.checkChildren().then(_this6.open);\n            } else if (_this6.activatable && !_this6.disabled) {\n              _this6.isActive = !_this6.isActive;\n\n              _this6.treeview.updateActive(_this6.key, _this6.isActive);\n\n              _this6.treeview.emitActive();\n            }\n          }\n        }\n      }), children);\n    },\n    genChild: function genChild(item, parentIsDisabled) {\n      return this.$createElement(VTreeviewNode, {\n        key: (0, _helpers.getObjectValueByPath)(item, this.itemKey),\n        props: {\n          activatable: this.activatable,\n          activeClass: this.activeClass,\n          item: item,\n          selectable: this.selectable,\n          selectedColor: this.selectedColor,\n          color: this.color,\n          disablePerNode: this.disablePerNode,\n          expandIcon: this.expandIcon,\n          indeterminateIcon: this.indeterminateIcon,\n          offIcon: this.offIcon,\n          onIcon: this.onIcon,\n          loadingIcon: this.loadingIcon,\n          itemKey: this.itemKey,\n          itemText: this.itemText,\n          itemDisabled: this.itemDisabled,\n          itemChildren: this.itemChildren,\n          loadChildren: this.loadChildren,\n          transition: this.transition,\n          openOnClick: this.openOnClick,\n          rounded: this.rounded,\n          shaped: this.shaped,\n          level: this.level + 1,\n          selectionType: this.selectionType,\n          parentIsDisabled: parentIsDisabled\n        },\n        scopedSlots: this.$scopedSlots\n      });\n    },\n    genChildrenWrapper: function genChildrenWrapper() {\n      var _this7 = this;\n\n      if (!this.isOpen || !this.children) return null;\n      var children = [this.children.map(function (c) {\n        return _this7.genChild(c, _this7.disabled);\n      })];\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__children'\n      }, children);\n    },\n    genTransition: function genTransition() {\n      return this.$createElement(_transitions.VExpandTransition, [this.genChildrenWrapper()]);\n    }\n  },\n  render: function render(h) {\n    var children = [this.genNode()];\n    if (this.transition) children.push(this.genTransition());else children.push(this.genChildrenWrapper());\n    return h('div', {\n      staticClass: 'v-treeview-node',\n      class: {\n        'v-treeview-node--leaf': !this.hasChildren,\n        'v-treeview-node--click': this.openOnClick,\n        'v-treeview-node--disabled': this.disabled,\n        'v-treeview-node--rounded': this.rounded,\n        'v-treeview-node--shaped': this.shaped,\n        'v-treeview-node--selected': this.isSelected\n      },\n      attrs: {\n        'aria-expanded': String(this.isOpen)\n      }\n    }, children);\n  }\n});\nvar _default2 = VTreeviewNode;\nexports.default = _default2;","map":{"version":3,"mappings":"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","names":["baseMixins","_colorable","VTreeviewNodeProps","activatable","Boolean","activeClass","type","String","default","color","disablePerNode","expandIcon","indeterminateIcon","itemChildren","itemDisabled","itemKey","itemText","loadChildren","Function","loadingIcon","offIcon","onIcon","openOnClick","rounded","selectable","selectedColor","shaped","transition","selectionType","validator","v","includes","VTreeviewNode","extend","name","inject","treeview","props","level","Number","item","Object","parentIsDisabled","data","hasLoaded","isActive","isIndeterminate","isLoading","isOpen","isSelected","computed","disabled","key","children","filter","child","_this","isExcluded","text","scopedProps","leaf","selected","indeterminate","active","open","computedIcon","hasChildren","length","created","register","beforeDestroy","unregister","methods","checkChildren","Promise","_this2","resolve","then","updateOpen","emitOpen","genLabel","$scopedSlots","label","push","$createElement","slot","staticClass","genPrependSlot","prepend","genAppendSlot","append","genContent","genToggle","_VIcon","class","on","click","e","stopPropagation","_this3","genCheckbox","undefined","_this4","$nextTick","updateSelected","emitSelected","genLevel","map","_this5","genNode","unshift","_toConsumableArray","setTextColor","_this6","updateActive","emitActive","genChild","scopedSlots","genChildrenWrapper","_this7","c","genTransition","_transitions","render","h","attrs"],"sourceRoot":"","sources":["../../../src/components/VTreeview/VTreeviewNode.ts"],"sourcesContent":["// Components\nimport { VExpandTransition } from '../transitions'\nimport { VIcon } from '../VIcon'\nimport VTreeview from './VTreeview'\n\n// Mixins\nimport { inject as RegistrableInject } from '../../mixins/registrable'\nimport Colorable from '../../mixins/colorable'\n\n// Utils\nimport mixins, { ExtractVue } from '../../util/mixins'\nimport { getObjectValueByPath, createRange } from '../../util/helpers'\n\n// Types\nimport { VNode, VNodeChildren, PropType } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\ntype VTreeViewInstance = InstanceType<typeof VTreeview>\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject('treeview')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  treeview: VTreeViewInstance\n}\n\nexport const VTreeviewNodeProps = {\n  activatable: Boolean,\n  activeClass: {\n    type: String,\n    default: 'v-treeview-node--active',\n  },\n  color: {\n    type: String,\n    default: 'primary',\n  },\n  disablePerNode: Boolean,\n  expandIcon: {\n    type: String,\n    default: '$subgroup',\n  },\n  indeterminateIcon: {\n    type: String,\n    default: '$checkboxIndeterminate',\n  },\n  itemChildren: {\n    type: String,\n    default: 'children',\n  },\n  itemDisabled: {\n    type: String,\n    default: 'disabled',\n  },\n  itemKey: {\n    type: String,\n    default: 'id',\n  },\n  itemText: {\n    type: String,\n    default: 'name',\n  },\n  loadChildren: Function as PropType<(item: any) => Promise<void>>,\n  loadingIcon: {\n    type: String,\n    default: '$loading',\n  },\n  offIcon: {\n    type: String,\n    default: '$checkboxOff',\n  },\n  onIcon: {\n    type: String,\n    default: '$checkboxOn',\n  },\n  openOnClick: Boolean,\n  rounded: Boolean,\n  selectable: Boolean,\n  selectedColor: {\n    type: String,\n    default: 'accent',\n  },\n  shaped: Boolean,\n  transition: Boolean,\n  selectionType: {\n    type: String as PropType<'leaf' | 'independent'>,\n    default: 'leaf',\n    validator: (v: string) => ['leaf', 'independent'].includes(v),\n  },\n}\n\n/* @vue/component */\nconst VTreeviewNode = baseMixins.extend<options>().extend({\n  name: 'v-treeview-node',\n\n  inject: {\n    treeview: {\n      default: null,\n    },\n  },\n\n  props: {\n    level: Number,\n    item: {\n      type: Object,\n      default: () => null,\n    } as PropValidator<Record<string, unknown> | null>,\n    parentIsDisabled: Boolean,\n    ...VTreeviewNodeProps,\n  },\n\n  data: () => ({\n    hasLoaded: false,\n    isActive: false, // Node is selected (row)\n    isIndeterminate: false, // Node has at least one selected child\n    isLoading: false,\n    isOpen: false, // Node is open/expanded\n    isSelected: false, // Node is selected (checkbox)\n  }),\n\n  computed: {\n    disabled (): boolean {\n      return (\n        getObjectValueByPath(this.item, this.itemDisabled) ||\n        (!this.disablePerNode && (this.parentIsDisabled && this.selectionType === 'leaf'))\n      )\n    },\n    key (): string {\n      return getObjectValueByPath(this.item, this.itemKey)\n    },\n    children (): any[] | null {\n      const children = getObjectValueByPath(this.item, this.itemChildren)\n      return children && children.filter((child: any) => !this.treeview.isExcluded(getObjectValueByPath(child, this.itemKey)))\n    },\n    text (): string {\n      return getObjectValueByPath(this.item, this.itemText)\n    },\n    scopedProps (): object {\n      return {\n        item: this.item,\n        leaf: !this.children,\n        selected: this.isSelected,\n        indeterminate: this.isIndeterminate,\n        active: this.isActive,\n        open: this.isOpen,\n      }\n    },\n    computedIcon (): string {\n      if (this.isIndeterminate) return this.indeterminateIcon\n      else if (this.isSelected) return this.onIcon\n      else return this.offIcon\n    },\n    hasChildren (): boolean {\n      return !!this.children && (!!this.children.length || !!this.loadChildren)\n    },\n  },\n\n  created () {\n    this.treeview.register(this)\n  },\n\n  beforeDestroy () {\n    this.treeview.unregister(this)\n  },\n\n  methods: {\n    checkChildren (): Promise<void> {\n      return new Promise<void>(resolve => {\n        // TODO: Potential issue with always trying\n        // to load children if response is empty?\n        if (!this.children || this.children.length || !this.loadChildren || this.hasLoaded) return resolve()\n\n        this.isLoading = true\n        resolve(this.loadChildren(this.item))\n      }).then(() => {\n        this.isLoading = false\n        this.hasLoaded = true\n      })\n    },\n    open () {\n      this.isOpen = !this.isOpen\n      this.treeview.updateOpen(this.key, this.isOpen)\n      this.treeview.emitOpen()\n    },\n    genLabel () {\n      const children = []\n\n      if (this.$scopedSlots.label) children.push(this.$scopedSlots.label(this.scopedProps))\n      else children.push(this.text)\n\n      return this.$createElement('div', {\n        slot: 'label',\n        staticClass: 'v-treeview-node__label',\n      }, children)\n    },\n    genPrependSlot () {\n      if (!this.$scopedSlots.prepend) return null\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__prepend',\n      }, this.$scopedSlots.prepend(this.scopedProps))\n    },\n    genAppendSlot () {\n      if (!this.$scopedSlots.append) return null\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__append',\n      }, this.$scopedSlots.append(this.scopedProps))\n    },\n    genContent () {\n      const children = [\n        this.genPrependSlot(),\n        this.genLabel(),\n        this.genAppendSlot(),\n      ]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__content',\n      }, children)\n    },\n    genToggle () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__toggle',\n        class: {\n          'v-treeview-node__toggle--open': this.isOpen,\n          'v-treeview-node__toggle--loading': this.isLoading,\n        },\n        slot: 'prepend',\n        on: {\n          click: (e: MouseEvent) => {\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => this.open())\n          },\n        },\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon])\n    },\n    genCheckbox () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__checkbox',\n        props: {\n          color: this.isSelected || this.isIndeterminate ? this.selectedColor : undefined,\n          disabled: this.disabled,\n        },\n        on: {\n          click: (e: MouseEvent) => {\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => {\n              // We nextTick here so that items watch in VTreeview has a chance to run first\n              this.$nextTick(() => {\n                this.isSelected = !this.isSelected\n                this.isIndeterminate = false\n\n                this.treeview.updateSelected(this.key, this.isSelected)\n                this.treeview.emitSelected()\n              })\n            })\n          },\n        },\n      }, [this.computedIcon])\n    },\n    genLevel (level: number) {\n      return createRange(level).map(() => this.$createElement('div', {\n        staticClass: 'v-treeview-node__level',\n      }))\n    },\n    genNode () {\n      const children = [this.genContent()]\n\n      if (this.selectable) children.unshift(this.genCheckbox())\n\n      if (this.hasChildren) {\n        children.unshift(this.genToggle())\n      } else {\n        children.unshift(...this.genLevel(1))\n      }\n\n      children.unshift(...this.genLevel(this.level))\n\n      return this.$createElement('div', this.setTextColor(this.isActive && this.color, {\n        staticClass: 'v-treeview-node__root',\n        class: {\n          [this.activeClass]: this.isActive,\n        },\n        on: {\n          click: () => {\n            if (this.openOnClick && this.hasChildren) {\n              this.checkChildren().then(this.open)\n            } else if (this.activatable && !this.disabled) {\n              this.isActive = !this.isActive\n              this.treeview.updateActive(this.key, this.isActive)\n              this.treeview.emitActive()\n            }\n          },\n        },\n      }), children)\n    },\n    genChild (item: any, parentIsDisabled: boolean) {\n      return this.$createElement(VTreeviewNode, {\n        key: getObjectValueByPath(item, this.itemKey),\n        props: {\n          activatable: this.activatable,\n          activeClass: this.activeClass,\n          item,\n          selectable: this.selectable,\n          selectedColor: this.selectedColor,\n          color: this.color,\n          disablePerNode: this.disablePerNode,\n          expandIcon: this.expandIcon,\n          indeterminateIcon: this.indeterminateIcon,\n          offIcon: this.offIcon,\n          onIcon: this.onIcon,\n          loadingIcon: this.loadingIcon,\n          itemKey: this.itemKey,\n          itemText: this.itemText,\n          itemDisabled: this.itemDisabled,\n          itemChildren: this.itemChildren,\n          loadChildren: this.loadChildren,\n          transition: this.transition,\n          openOnClick: this.openOnClick,\n          rounded: this.rounded,\n          shaped: this.shaped,\n          level: this.level + 1,\n          selectionType: this.selectionType,\n          parentIsDisabled,\n        },\n        scopedSlots: this.$scopedSlots,\n      })\n    },\n    genChildrenWrapper () {\n      if (!this.isOpen || !this.children) return null\n\n      const children = [this.children.map(c => this.genChild(c, this.disabled))]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__children',\n      }, children)\n    },\n    genTransition () {\n      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()])\n    },\n  },\n\n  render (h): VNode {\n    const children: VNodeChildren = [this.genNode()]\n\n    if (this.transition) children.push(this.genTransition())\n    else children.push(this.genChildrenWrapper())\n\n    return h('div', {\n      staticClass: 'v-treeview-node',\n      class: {\n        'v-treeview-node--leaf': !this.hasChildren,\n        'v-treeview-node--click': this.openOnClick,\n        'v-treeview-node--disabled': this.disabled,\n        'v-treeview-node--rounded': this.rounded,\n        'v-treeview-node--shaped': this.shaped,\n        'v-treeview-node--selected': this.isSelected,\n      },\n      attrs: {\n        'aria-expanded': String(this.isOpen),\n      },\n    }, children)\n  },\n})\n\nexport default VTreeviewNode\n"]},"metadata":{},"sourceType":"script"}