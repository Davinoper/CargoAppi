{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nrequire(\"core-js/modules/es.array.from.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nrequire(\"core-js/modules/es.symbol.js\");\n\nrequire(\"core-js/modules/es.symbol.description.js\");\n\nrequire(\"core-js/modules/es.symbol.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.object.keys.js\");\n\nrequire(\"core-js/modules/es.array.filter.js\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor.js\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptors.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"../../../src/components/VSkeletonLoader/VSkeletonLoader.sass\");\n\nvar _elevatable = _interopRequireDefault(require(\"../../mixins/elevatable\"));\n\nvar _measurable = _interopRequireDefault(require(\"../../mixins/measurable\"));\n\nvar _themeable = _interopRequireDefault(require(\"../../mixins/themeable\"));\n\nvar _mixins = _interopRequireDefault(require(\"../../util/mixins\"));\n\nvar _helpers = require(\"../../util/helpers\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* @vue/component */\n\n\nvar _default2 = (0, _mixins.default)(_elevatable.default, _measurable.default, _themeable.default).extend({\n  name: 'VSkeletonLoader',\n  props: {\n    boilerplate: Boolean,\n    loading: Boolean,\n    tile: Boolean,\n    transition: String,\n    type: String,\n    types: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  computed: {\n    attrs: function attrs() {\n      if (!this.isLoading) return this.$attrs;\n      return !this.boilerplate ? _objectSpread({\n        'aria-busy': true,\n        'aria-live': 'polite',\n        role: 'alert'\n      }, this.$attrs) : {};\n    },\n    classes: function classes() {\n      return _objectSpread(_objectSpread({\n        'v-skeleton-loader--boilerplate': this.boilerplate,\n        'v-skeleton-loader--is-loading': this.isLoading,\n        'v-skeleton-loader--tile': this.tile\n      }, this.themeClasses), this.elevationClasses);\n    },\n    isLoading: function isLoading() {\n      return !('default' in this.$scopedSlots) || this.loading;\n    },\n    rootTypes: function rootTypes() {\n      return _objectSpread({\n        actions: 'button@2',\n        article: 'heading, paragraph',\n        avatar: 'avatar',\n        button: 'button',\n        card: 'image, card-heading',\n        'card-avatar': 'image, list-item-avatar',\n        'card-heading': 'heading',\n        chip: 'chip',\n        'date-picker': 'list-item, card-heading, divider, date-picker-options, date-picker-days, actions',\n        'date-picker-options': 'text, avatar@2',\n        'date-picker-days': 'avatar@28',\n        heading: 'heading',\n        image: 'image',\n        'list-item': 'text',\n        'list-item-avatar': 'avatar, text',\n        'list-item-two-line': 'sentences',\n        'list-item-avatar-two-line': 'avatar, sentences',\n        'list-item-three-line': 'paragraph',\n        'list-item-avatar-three-line': 'avatar, paragraph',\n        paragraph: 'text@3',\n        sentences: 'text@2',\n        table: 'table-heading, table-thead, table-tbody, table-tfoot',\n        'table-heading': 'heading, text',\n        'table-thead': 'heading@6',\n        'table-tbody': 'table-row-divider@6',\n        'table-row-divider': 'table-row, divider',\n        'table-row': 'table-cell@6',\n        'table-cell': 'text',\n        'table-tfoot': 'text@2, avatar@2',\n        text: 'text'\n      }, this.types);\n    }\n  },\n  methods: {\n    genBone: function genBone(text, children) {\n      return this.$createElement('div', {\n        staticClass: \"v-skeleton-loader__\".concat(text, \" v-skeleton-loader__bone\")\n      }, children);\n    },\n    genBones: function genBones(bone) {\n      var _this = this; // e.g. 'text@3'\n\n\n      var _bone$split = bone.split('@'),\n          _bone$split2 = _slicedToArray(_bone$split, 2),\n          type = _bone$split2[0],\n          length = _bone$split2[1];\n\n      var generator = function generator() {\n        return _this.genStructure(type);\n      }; // Generate a length array based upon\n      // value after @ in the bone string\n\n\n      return Array.from({\n        length: length\n      }).map(generator);\n    },\n    // Fix type when this is merged\n    // https://github.com/microsoft/TypeScript/pull/33050\n    genStructure: function genStructure(type) {\n      var children = [];\n      type = type || this.type || '';\n      var bone = this.rootTypes[type] || ''; // End of recursion, do nothing\n\n      /* eslint-disable-next-line no-empty, brace-style */\n\n      if (type === bone) {} // Array of values - e.g. 'heading, paragraph, text@2'\n      else if (type.indexOf(',') > -1) return this.mapBones(type); // Array of values - e.g. 'paragraph@4'\n      else if (type.indexOf('@') > -1) return this.genBones(type); // Array of values - e.g. 'card@2'\n      else if (bone.indexOf(',') > -1) children = this.mapBones(bone); // Array of values - e.g. 'list-item@2'\n      else if (bone.indexOf('@') > -1) children = this.genBones(bone); // Single value - e.g. 'card-heading'\n      else if (bone) children.push(this.genStructure(bone));\n\n      return [this.genBone(type, children)];\n    },\n    genSkeleton: function genSkeleton() {\n      var children = [];\n      if (!this.isLoading) children.push((0, _helpers.getSlot)(this));else children.push(this.genStructure());\n      /* istanbul ignore else */\n\n      if (!this.transition) return children;\n      /* istanbul ignore next */\n\n      return this.$createElement('transition', {\n        props: {\n          name: this.transition\n        },\n        // Only show transition when\n        // content has been loaded\n        on: {\n          afterEnter: this.resetStyles,\n          beforeEnter: this.onBeforeEnter,\n          beforeLeave: this.onBeforeLeave,\n          leaveCancelled: this.resetStyles\n        }\n      }, children);\n    },\n    mapBones: function mapBones(bones) {\n      // Remove spaces and return array of structures\n      return bones.replace(/\\s/g, '').split(',').map(this.genStructure);\n    },\n    onBeforeEnter: function onBeforeEnter(el) {\n      this.resetStyles(el);\n      if (!this.isLoading) return;\n      el._initialStyle = {\n        display: el.style.display,\n        transition: el.style.transition\n      };\n      el.style.setProperty('transition', 'none', 'important');\n    },\n    onBeforeLeave: function onBeforeLeave(el) {\n      el.style.setProperty('display', 'none', 'important');\n    },\n    resetStyles: function resetStyles(el) {\n      if (!el._initialStyle) return;\n      el.style.display = el._initialStyle.display || '';\n      el.style.transition = el._initialStyle.transition;\n      delete el._initialStyle;\n    }\n  },\n  render: function render(h) {\n    return h('div', {\n      staticClass: 'v-skeleton-loader',\n      attrs: this.attrs,\n      on: this.$listeners,\n      class: this.classes,\n      style: this.isLoading ? this.measurableStyles : undefined\n    }, [this.genSkeleton()]);\n  }\n});\n\nexports.default = _default2;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACAA;;AAGA;;AACA;;AACA;;AAGA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;;gBACe,qBACbC,mBADa,EAEbC,mBAFa,EAGbC,kBAHa,EAIbC,MAJa,CAIN;EACPC,IAAI,EAAE,iBADC;EAGPC,KAAK,EAAE;IACLC,WAAW,EAAEC,OADR;IAELC,OAAO,EAAED,OAFJ;IAGLE,IAAI,EAAEF,OAHD;IAILG,UAAU,EAAEC,MAJP;IAKLC,IAAI,EAAED,MALD;IAMLE,KAAK,EAAE;MACLD,IAAI,EAAEE,MADD;MAELC,OAAO,EAAE;QAAA,OAAO,EAAP;MAAA;IAFJ;EANF,CAHA;EAePC,QAAQ,EAAE;IACRC,KADQ,mBACH;MACH,IAAI,CAAC,KAAKC,SAAV,EAAqB,OAAO,KAAKC,MAAZ;MAErB,OAAO,CAAC,KAAKb,WAAN;QACL,aAAa,IADR;QAEL,aAAa,QAFR;QAGLc,IAAI,EAAE;MAHD,GAIF,KAAKD,MAJH,IAKH,EALJ;IAJM;IAWRE,OAXQ,qBAWD;MACL;QACE,kCAAkC,KAAKf,WADzC;QAEE,iCAAiC,KAAKY,SAFxC;QAGE,2BAA2B,KAAKT;MAHlC,GAIK,KAAKa,YAJV,GAKK,KAAKC,gBALV;IAZM;IAoBRL,SApBQ,uBAoBC;MACP,OAAO,EAAE,aAAa,KAAKM,YAApB,KAAqC,KAAKhB,OAAjD;IArBM;IAuBRiB,SAvBQ,uBAuBC;MACP;QACEC,OAAO,EAAE,UADX;QAEEC,OAAO,EAAE,oBAFX;QAGEC,MAAM,EAAE,QAHV;QAIEC,MAAM,EAAE,QAJV;QAKEC,IAAI,EAAE,qBALR;QAME,eAAe,yBANjB;QAOE,gBAAgB,SAPlB;QAQEC,IAAI,EAAE,MARR;QASE,eAAe,kFATjB;QAUE,uBAAuB,gBAVzB;QAWE,oBAAoB,WAXtB;QAYEC,OAAO,EAAE,SAZX;QAaEC,KAAK,EAAE,OAbT;QAcE,aAAa,MAdf;QAeE,oBAAoB,cAftB;QAgBE,sBAAsB,WAhBxB;QAiBE,6BAA6B,mBAjB/B;QAkBE,wBAAwB,WAlB1B;QAmBE,+BAA+B,mBAnBjC;QAoBEC,SAAS,EAAE,QApBb;QAqBEC,SAAS,EAAE,QArBb;QAsBEC,KAAK,EAAE,sDAtBT;QAuBE,iBAAiB,eAvBnB;QAwBE,eAAe,WAxBjB;QAyBE,eAAe,qBAzBjB;QA0BE,qBAAqB,oBA1BvB;QA2BE,aAAa,cA3Bf;QA4BE,cAAc,MA5BhB;QA6BE,eAAe,kBA7BjB;QA8BEC,IAAI,EAAE;MA9BR,GA+BK,KAAKxB,KA/BV;IAiCD;EAzDO,CAfH;EA2EPyB,OAAO,EAAE;IACPC,OADO,mBACEF,IADF,EACgBG,QADhB,EACiC;MACtC,OAAO,KAAKC,cAAL,CAAoB,KAApB,EAA2B;QAChCC,WAAW,+BAAwBL,IAAxB;MADqB,CAA3B,EAEJG,QAFI,CAAP;IAFK;IAMPG,QANO,oBAMGC,IANH,EAMe;MAAA,kBACpB;;;MADoB,kBAEGA,IAAI,CAACC,KAAL,CAAW,GAAX,CAFH;MAAA;MAAA,IAEbjC,IAFa;MAAA,IAEPkC,MAFO;;MAGpB,IAAMC,SAAS,GAAG,SAAZA,SAAY;QAAA,OAAMC,KAAI,CAACC,YAAL,CAAkBrC,IAAlB,CAAN;MAAlB,EAHoB,CAKpB;MACA;;;MACA,OAAOsC,KAAK,CAACC,IAAN,CAAW;QAAEL,MAAM,EAANA;MAAF,CAAX,EAAuBM,GAAvB,CAA2BL,SAA3B,CAAP;IAbK;IAeP;IACA;IACAE,YAjBO,wBAiBOrC,IAjBP,EAiBoB;MACzB,IAAI4B,QAAQ,GAAG,EAAf;MACA5B,IAAI,GAAGA,IAAI,IAAI,KAAKA,IAAb,IAAqB,EAA5B;MACA,IAAMgC,IAAI,GAAG,KAAKnB,SAAL,CAAeb,IAAf,KAAwB,EAArC,CAHyB,CAKzB;;MACA;;MACA,IAAIA,IAAI,KAAKgC,IAAb,EAAmB,CAAnB,EACA;MADA,KAEK,IAAIhC,IAAI,CAACyC,OAAL,CAAa,GAAb,IAAoB,CAAC,CAAzB,EAA4B,OAAO,KAAKC,QAAL,CAAc1C,IAAd,CAAP,CAA5B,CACL;MADK,KAEA,IAAIA,IAAI,CAACyC,OAAL,CAAa,GAAb,IAAoB,CAAC,CAAzB,EAA4B,OAAO,KAAKV,QAAL,CAAc/B,IAAd,CAAP,CAA5B,CACL;MADK,KAEA,IAAIgC,IAAI,CAACS,OAAL,CAAa,GAAb,IAAoB,CAAC,CAAzB,EAA4Bb,QAAQ,GAAG,KAAKc,QAAL,CAAcV,IAAd,CAAX,CAA5B,CACL;MADK,KAEA,IAAIA,IAAI,CAACS,OAAL,CAAa,GAAb,IAAoB,CAAC,CAAzB,EAA4Bb,QAAQ,GAAG,KAAKG,QAAL,CAAcC,IAAd,CAAX,CAA5B,CACL;MADK,KAEA,IAAIA,IAAJ,EAAUJ,QAAQ,CAACe,IAAT,CAAc,KAAKN,YAAL,CAAkBL,IAAlB,CAAd;;MAEf,OAAO,CAAC,KAAKL,OAAL,CAAa3B,IAAb,EAAmB4B,QAAnB,CAAD,CAAP;IApCK;IAsCPgB,WAtCO,yBAsCI;MACT,IAAMhB,QAAQ,GAAG,EAAjB;MAEA,IAAI,CAAC,KAAKtB,SAAV,EAAqBsB,QAAQ,CAACe,IAAT,CAAc,sBAAQ,IAAR,CAAd,EAArB,KACKf,QAAQ,CAACe,IAAT,CAAc,KAAKN,YAAL,EAAd;MAEL;;MACA,IAAI,CAAC,KAAKvC,UAAV,EAAsB,OAAO8B,QAAP;MAEtB;;MACA,OAAO,KAAKC,cAAL,CAAoB,YAApB,EAAkC;QACvCpC,KAAK,EAAE;UACLD,IAAI,EAAE,KAAKM;QADN,CADgC;QAIvC;QACA;QACA+C,EAAE,EAAE;UACFC,UAAU,EAAE,KAAKC,WADf;UAEFC,WAAW,EAAE,KAAKC,aAFhB;UAGFC,WAAW,EAAE,KAAKC,aAHhB;UAIFC,cAAc,EAAE,KAAKL;QAJnB;MANmC,CAAlC,EAYJnB,QAZI,CAAP;IAhDK;IA8DPc,QA9DO,oBA8DGW,KA9DH,EA8DgB;MACrB;MACA,OAAOA,KAAK,CAACC,OAAN,CAAc,KAAd,EAAqB,EAArB,EAAyBrB,KAAzB,CAA+B,GAA/B,EAAoCO,GAApC,CAAwC,KAAKH,YAA7C,CAAP;IAhEK;IAkEPY,aAlEO,yBAkEQM,EAlER,EAkEqC;MAC1C,KAAKR,WAAL,CAAiBQ,EAAjB;MAEA,IAAI,CAAC,KAAKjD,SAAV,EAAqB;MAErBiD,EAAE,CAACC,aAAH,GAAmB;QACjBC,OAAO,EAAEF,EAAE,CAACG,KAAH,CAASD,OADD;QAEjB3D,UAAU,EAAEyD,EAAE,CAACG,KAAH,CAAS5D;MAFJ,CAAnB;MAKAyD,EAAE,CAACG,KAAH,CAASC,WAAT,CAAqB,YAArB,EAAmC,MAAnC,EAA2C,WAA3C;IA5EK;IA8EPR,aA9EO,yBA8EQI,EA9ER,EA8EqC;MAC1CA,EAAE,CAACG,KAAH,CAASC,WAAT,CAAqB,SAArB,EAAgC,MAAhC,EAAwC,WAAxC;IA/EK;IAiFPZ,WAjFO,uBAiFMQ,EAjFN,EAiFmC;MACxC,IAAI,CAACA,EAAE,CAACC,aAAR,EAAuB;MAEvBD,EAAE,CAACG,KAAH,CAASD,OAAT,GAAmBF,EAAE,CAACC,aAAH,CAAiBC,OAAjB,IAA4B,EAA/C;MACAF,EAAE,CAACG,KAAH,CAAS5D,UAAT,GAAsByD,EAAE,CAACC,aAAH,CAAiB1D,UAAvC;MAEA,OAAOyD,EAAE,CAACC,aAAV;IACD;EAxFM,CA3EF;EAsKPI,MAtKO,kBAsKCC,CAtKD,EAsKE;IACP,OAAOA,CAAC,CAAC,KAAD,EAAQ;MACd/B,WAAW,EAAE,mBADC;MAEdzB,KAAK,EAAE,KAAKA,KAFE;MAGdwC,EAAE,EAAE,KAAKiB,UAHK;MAIdC,KAAK,EAAE,KAAKtD,OAJE;MAKdiD,KAAK,EAAE,KAAKpD,SAAL,GAAiB,KAAK0D,gBAAtB,GAAyCC;IALlC,CAAR,EAML,CAAC,KAAKrB,WAAL,EAAD,CANK,CAAR;EAOD;AA9KM,CAJM","names":["require","_elevatable","_measurable","_themeable","extend","name","props","boilerplate","Boolean","loading","tile","transition","String","type","types","Object","default","computed","attrs","isLoading","$attrs","role","classes","themeClasses","elevationClasses","$scopedSlots","rootTypes","actions","article","avatar","button","card","chip","heading","image","paragraph","sentences","table","text","methods","genBone","children","$createElement","staticClass","genBones","bone","split","length","generator","_this","genStructure","Array","from","map","indexOf","mapBones","push","genSkeleton","on","afterEnter","resetStyles","beforeEnter","onBeforeEnter","beforeLeave","onBeforeLeave","leaveCancelled","bones","replace","el","_initialStyle","display","style","setProperty","render","h","$listeners","class","measurableStyles","undefined"],"sourceRoot":"","sources":["../../../src/components/VSkeletonLoader/VSkeletonLoader.ts"],"sourcesContent":["// Styles\nimport './VSkeletonLoader.sass'\n\n// Mixins\nimport Elevatable from '../../mixins/elevatable'\nimport Measurable from '../../mixins/measurable'\nimport Themeable from '../../mixins/themeable'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\n// Types\nimport { VNode } from 'vue'\nimport { getSlot } from '../../util/helpers'\nimport { PropValidator } from 'vue/types/options'\n\nexport interface HTMLSkeletonLoaderElement extends HTMLElement {\n  _initialStyle?: {\n    display: string | null\n    transition: string\n  }\n}\n\n/* @vue/component */\nexport default mixins(\n  Elevatable,\n  Measurable,\n  Themeable,\n).extend({\n  name: 'VSkeletonLoader',\n\n  props: {\n    boilerplate: Boolean,\n    loading: Boolean,\n    tile: Boolean,\n    transition: String,\n    type: String,\n    types: {\n      type: Object,\n      default: () => ({}),\n    } as PropValidator<Record<string, string>>,\n  },\n\n  computed: {\n    attrs (): object {\n      if (!this.isLoading) return this.$attrs\n\n      return !this.boilerplate ? {\n        'aria-busy': true,\n        'aria-live': 'polite',\n        role: 'alert',\n        ...this.$attrs,\n      } : {}\n    },\n    classes (): object {\n      return {\n        'v-skeleton-loader--boilerplate': this.boilerplate,\n        'v-skeleton-loader--is-loading': this.isLoading,\n        'v-skeleton-loader--tile': this.tile,\n        ...this.themeClasses,\n        ...this.elevationClasses,\n      }\n    },\n    isLoading (): boolean {\n      return !('default' in this.$scopedSlots) || this.loading\n    },\n    rootTypes (): Record<string, string> {\n      return {\n        actions: 'button@2',\n        article: 'heading, paragraph',\n        avatar: 'avatar',\n        button: 'button',\n        card: 'image, card-heading',\n        'card-avatar': 'image, list-item-avatar',\n        'card-heading': 'heading',\n        chip: 'chip',\n        'date-picker': 'list-item, card-heading, divider, date-picker-options, date-picker-days, actions',\n        'date-picker-options': 'text, avatar@2',\n        'date-picker-days': 'avatar@28',\n        heading: 'heading',\n        image: 'image',\n        'list-item': 'text',\n        'list-item-avatar': 'avatar, text',\n        'list-item-two-line': 'sentences',\n        'list-item-avatar-two-line': 'avatar, sentences',\n        'list-item-three-line': 'paragraph',\n        'list-item-avatar-three-line': 'avatar, paragraph',\n        paragraph: 'text@3',\n        sentences: 'text@2',\n        table: 'table-heading, table-thead, table-tbody, table-tfoot',\n        'table-heading': 'heading, text',\n        'table-thead': 'heading@6',\n        'table-tbody': 'table-row-divider@6',\n        'table-row-divider': 'table-row, divider',\n        'table-row': 'table-cell@6',\n        'table-cell': 'text',\n        'table-tfoot': 'text@2, avatar@2',\n        text: 'text',\n        ...this.types,\n      }\n    },\n  },\n\n  methods: {\n    genBone (text: string, children: VNode[]) {\n      return this.$createElement('div', {\n        staticClass: `v-skeleton-loader__${text} v-skeleton-loader__bone`,\n      }, children)\n    },\n    genBones (bone: string): VNode[] {\n      // e.g. 'text@3'\n      const [type, length] = bone.split('@') as [string, number]\n      const generator = () => this.genStructure(type)\n\n      // Generate a length array based upon\n      // value after @ in the bone string\n      return Array.from({ length }).map(generator)\n    },\n    // Fix type when this is merged\n    // https://github.com/microsoft/TypeScript/pull/33050\n    genStructure (type?: string): any {\n      let children = []\n      type = type || this.type || ''\n      const bone = this.rootTypes[type] || ''\n\n      // End of recursion, do nothing\n      /* eslint-disable-next-line no-empty, brace-style */\n      if (type === bone) {}\n      // Array of values - e.g. 'heading, paragraph, text@2'\n      else if (type.indexOf(',') > -1) return this.mapBones(type)\n      // Array of values - e.g. 'paragraph@4'\n      else if (type.indexOf('@') > -1) return this.genBones(type)\n      // Array of values - e.g. 'card@2'\n      else if (bone.indexOf(',') > -1) children = this.mapBones(bone)\n      // Array of values - e.g. 'list-item@2'\n      else if (bone.indexOf('@') > -1) children = this.genBones(bone)\n      // Single value - e.g. 'card-heading'\n      else if (bone) children.push(this.genStructure(bone))\n\n      return [this.genBone(type, children)]\n    },\n    genSkeleton () {\n      const children = []\n\n      if (!this.isLoading) children.push(getSlot(this))\n      else children.push(this.genStructure())\n\n      /* istanbul ignore else */\n      if (!this.transition) return children\n\n      /* istanbul ignore next */\n      return this.$createElement('transition', {\n        props: {\n          name: this.transition,\n        },\n        // Only show transition when\n        // content has been loaded\n        on: {\n          afterEnter: this.resetStyles,\n          beforeEnter: this.onBeforeEnter,\n          beforeLeave: this.onBeforeLeave,\n          leaveCancelled: this.resetStyles,\n        },\n      }, children)\n    },\n    mapBones (bones: string) {\n      // Remove spaces and return array of structures\n      return bones.replace(/\\s/g, '').split(',').map(this.genStructure)\n    },\n    onBeforeEnter (el: HTMLSkeletonLoaderElement) {\n      this.resetStyles(el)\n\n      if (!this.isLoading) return\n\n      el._initialStyle = {\n        display: el.style.display,\n        transition: el.style.transition,\n      }\n\n      el.style.setProperty('transition', 'none', 'important')\n    },\n    onBeforeLeave (el: HTMLSkeletonLoaderElement) {\n      el.style.setProperty('display', 'none', 'important')\n    },\n    resetStyles (el: HTMLSkeletonLoaderElement) {\n      if (!el._initialStyle) return\n\n      el.style.display = el._initialStyle.display || ''\n      el.style.transition = el._initialStyle.transition\n\n      delete el._initialStyle\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-skeleton-loader',\n      attrs: this.attrs,\n      on: this.$listeners,\n      class: this.classes,\n      style: this.isLoading ? this.measurableStyles : undefined,\n    }, [this.genSkeleton()])\n  },\n})\n"]},"metadata":{},"sourceType":"script"}