{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.symbol.js\");\n\nrequire(\"core-js/modules/es.symbol.description.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.symbol.iterator.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nrequire(\"core-js/modules/es.array.from.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nrequire(\"core-js/modules/es.array.sort.js\");\n\nrequire(\"core-js/modules/es.array.filter.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stack = void 0;\n\nvar _common = require(\"./common\");\n\nvar _timestamp = require(\"../util/timestamp\");\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e2) {\n          throw _e2;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e3) {\n      didErr = true;\n      err = _e3;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar FULL_WIDTH = 100;\nvar DEFAULT_OFFSET = 5;\nvar WIDTH_MULTIPLIER = 1.7;\n/**\n * Variation of column mode where events can be stacked. The priority of this\n * mode is to stack events together taking up the least amount of space while\n * trying to ensure the content of the event is always visible as well as its\n * start and end. A sibling column has intersecting event content and must be\n * placed beside each other. Non-sibling columns are offset by 5% from the\n * previous column. The width is scaled by 1.7 so the events overlap and\n * whitespace is reduced. If there is a hole in columns the event width is\n * scaled up so it intersects with the next column. The columns have equal\n * width in the space they are given. If the event doesn't have any to the\n * right of it that intersect with it's content it's right side is extended\n * to the right side.\n */\n\nvar stack = function stack(events, firstWeekday, overlapThreshold) {\n  var handler = (0, _common.getOverlapGroupHandler)(firstWeekday); // eslint-disable-next-line max-statements\n\n  return function (day, dayEvents, timed, reset) {\n    if (!timed) {\n      return handler.getVisuals(day, dayEvents, timed, reset);\n    }\n\n    var dayStart = (0, _timestamp.getTimestampIdentifier)(day);\n    var visuals = (0, _common.getVisuals)(dayEvents, dayStart);\n    var groups = getGroups(visuals, dayStart);\n\n    var _iterator = _createForOfIteratorHelper(groups),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var group = _step.value;\n        var nodes = [];\n\n        var _iterator2 = _createForOfIteratorHelper(group.visuals),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var visual = _step2.value;\n            var child = getNode(visual, dayStart);\n            var index = getNextIndex(child, nodes);\n\n            if (index === false) {\n              var parent = getParent(child, nodes);\n\n              if (parent) {\n                child.parent = parent;\n                child.sibling = (0, _common.hasOverlap)(child.start, child.end, parent.start, addTime(parent.start, overlapThreshold));\n                child.index = parent.index + 1;\n                parent.children.push(child);\n              }\n            } else {\n              var _getOverlappingRange = getOverlappingRange(child, nodes, index - 1, index - 1),\n                  _getOverlappingRange2 = _slicedToArray(_getOverlappingRange, 1),\n                  _parent = _getOverlappingRange2[0];\n\n              var children = getOverlappingRange(child, nodes, index + 1, index + nodes.length, true);\n              child.children = children;\n              child.index = index;\n\n              if (_parent) {\n                child.parent = _parent;\n                child.sibling = (0, _common.hasOverlap)(child.start, child.end, _parent.start, addTime(_parent.start, overlapThreshold));\n\n                _parent.children.push(child);\n              }\n\n              var _iterator3 = _createForOfIteratorHelper(children),\n                  _step3;\n\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  var grand = _step3.value;\n\n                  if (grand.parent === _parent) {\n                    grand.parent = child;\n                  }\n\n                  var grandNext = grand.index - child.index <= 1;\n\n                  if (grandNext && child.sibling && (0, _common.hasOverlap)(child.start, addTime(child.start, overlapThreshold), grand.start, grand.end)) {\n                    grand.sibling = true;\n                  }\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n            }\n\n            nodes.push(child);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        calculateBounds(nodes, overlapThreshold);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    visuals.sort(function (a, b) {\n      return a.left - b.left || a.event.startTimestampIdentifier - b.event.startTimestampIdentifier;\n    });\n    return visuals;\n  };\n};\n\nexports.stack = stack;\n\nfunction calculateBounds(nodes, overlapThreshold) {\n  var _iterator4 = _createForOfIteratorHelper(nodes),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var node = _step4.value;\n      var visual = node.visual,\n          parent = node.parent;\n      var columns = getMaxChildIndex(node) + 1;\n      var spaceLeft = parent ? parent.visual.left : 0;\n      var spaceWidth = FULL_WIDTH - spaceLeft;\n      var offset = Math.min(DEFAULT_OFFSET, FULL_WIDTH / columns);\n      var columnWidthMultiplier = getColumnWidthMultiplier(node, nodes);\n      var columnOffset = spaceWidth / (columns - node.index + 1);\n      var columnWidth = spaceWidth / (columns - node.index + (node.sibling ? 1 : 0)) * columnWidthMultiplier;\n\n      if (parent) {\n        visual.left = node.sibling ? spaceLeft + columnOffset : spaceLeft + offset;\n      }\n\n      visual.width = hasFullWidth(node, nodes, overlapThreshold) ? FULL_WIDTH - visual.left : Math.min(FULL_WIDTH - visual.left, columnWidth * WIDTH_MULTIPLIER);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n}\n\nfunction getColumnWidthMultiplier(node, nodes) {\n  if (!node.children.length) {\n    return 1;\n  }\n\n  var maxColumn = node.index + nodes.length;\n  var minColumn = node.children.reduce(function (min, c) {\n    return Math.min(min, c.index);\n  }, maxColumn);\n  return minColumn - node.index;\n}\n\nfunction getOverlappingIndices(node, nodes) {\n  var indices = [];\n\n  var _iterator5 = _createForOfIteratorHelper(nodes),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var other = _step5.value;\n\n      if ((0, _common.hasOverlap)(node.start, node.end, other.start, other.end)) {\n        indices.push(other.index);\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  return indices;\n}\n\nfunction getNextIndex(node, nodes) {\n  var indices = getOverlappingIndices(node, nodes);\n  indices.sort();\n\n  for (var i = 0; i < indices.length; i++) {\n    if (i < indices[i]) {\n      return i;\n    }\n  }\n\n  return false;\n}\n\nfunction getOverlappingRange(node, nodes, indexMin, indexMax) {\n  var returnFirstColumn = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var overlapping = [];\n\n  var _iterator6 = _createForOfIteratorHelper(nodes),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var other = _step6.value;\n\n      if (other.index >= indexMin && other.index <= indexMax && (0, _common.hasOverlap)(node.start, node.end, other.start, other.end)) {\n        overlapping.push(other);\n      }\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  if (returnFirstColumn && overlapping.length > 0) {\n    var first = overlapping.reduce(function (min, n) {\n      return Math.min(min, n.index);\n    }, overlapping[0].index);\n    return overlapping.filter(function (n) {\n      return n.index === first;\n    });\n  }\n\n  return overlapping;\n}\n\nfunction getParent(node, nodes) {\n  var parent = null;\n\n  var _iterator7 = _createForOfIteratorHelper(nodes),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var other = _step7.value;\n\n      if ((0, _common.hasOverlap)(node.start, node.end, other.start, other.end) && (parent === null || other.index > parent.index)) {\n        parent = other;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return parent;\n}\n\nfunction hasFullWidth(node, nodes, overlapThreshold) {\n  var _iterator8 = _createForOfIteratorHelper(nodes),\n      _step8;\n\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var other = _step8.value;\n\n      if (other !== node && other.index > node.index && (0, _common.hasOverlap)(node.start, addTime(node.start, overlapThreshold), other.start, other.end)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n\n  return true;\n}\n\nfunction getGroups(visuals, dayStart) {\n  var groups = [];\n\n  var _iterator9 = _createForOfIteratorHelper(visuals),\n      _step9;\n\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var visual = _step9.value;\n\n      var _getNormalizedRange = (0, _common.getNormalizedRange)(visual.event, dayStart),\n          _getNormalizedRange2 = _slicedToArray(_getNormalizedRange, 2),\n          start = _getNormalizedRange2[0],\n          end = _getNormalizedRange2[1];\n\n      var added = false;\n\n      var _iterator10 = _createForOfIteratorHelper(groups),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var group = _step10.value;\n\n          if ((0, _common.hasOverlap)(start, end, group.start, group.end)) {\n            group.visuals.push(visual);\n            group.end = Math.max(group.end, end);\n            added = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n\n      if (!added) {\n        groups.push({\n          start: start,\n          end: end,\n          visuals: [visual]\n        });\n      }\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n\n  return groups;\n}\n\nfunction getNode(visual, dayStart) {\n  var _getNormalizedRange3 = (0, _common.getNormalizedRange)(visual.event, dayStart),\n      _getNormalizedRange4 = _slicedToArray(_getNormalizedRange3, 2),\n      start = _getNormalizedRange4[0],\n      end = _getNormalizedRange4[1];\n\n  return {\n    parent: null,\n    sibling: true,\n    index: 0,\n    visual: visual,\n    start: start,\n    end: end,\n    children: []\n  };\n}\n\nfunction getMaxChildIndex(node) {\n  var max = node.index;\n\n  var _iterator11 = _createForOfIteratorHelper(node.children),\n      _step11;\n\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var child = _step11.value;\n      var childMax = getMaxChildIndex(child);\n\n      if (childMax > max) {\n        max = childMax;\n      }\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n\n  return max;\n}\n\nfunction addTime(identifier, minutes) {\n  var removeMinutes = identifier % 100;\n  var totalMinutes = removeMinutes + minutes;\n  var addHours = Math.floor(totalMinutes / 60);\n  var addMinutes = totalMinutes % 60;\n  return identifier - removeMinutes + addHours * 100 + addMinutes;\n}","map":{"version":3,"mappings":"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","names":["FULL_WIDTH","DEFAULT_OFFSET","WIDTH_MULTIPLIER","stack","events","firstWeekday","overlapThreshold","handler","day","dayEvents","timed","reset","getVisuals","dayStart","visuals","groups","getGroups","group","nodes","visual","child","getNode","index","getNextIndex","parent","getParent","sibling","start","end","addTime","children","push","getOverlappingRange","_parent","length","grand","grandNext","_iterator3","_iterator2","calculateBounds","_iterator","sort","a","b","left","event","startTimestampIdentifier","node","columns","getMaxChildIndex","spaceLeft","spaceWidth","offset","Math","min","columnWidthMultiplier","getColumnWidthMultiplier","columnOffset","columnWidth","width","hasFullWidth","_iterator4","maxColumn","minColumn","reduce","c","getOverlappingIndices","indices","other","_iterator5","i","indexMin","indexMax","returnFirstColumn","overlapping","_iterator6","first","n","filter","_iterator7","_iterator8","added","max","_iterator10","_iterator9","childMax","_iterator11","identifier","minutes","removeMinutes","totalMinutes","addHours","floor","addMinutes"],"sourceRoot":"","sources":["../../../../src/components/VCalendar/modes/stack.ts"],"sourcesContent":["import { CalendarEventOverlapMode, CalendarEventVisual } from 'vuetify/types'\nimport { getOverlapGroupHandler, getVisuals, hasOverlap, getNormalizedRange } from './common'\nimport { getTimestampIdentifier } from '../util/timestamp'\n\ninterface Group {\n  start: number\n  end: number\n  visuals: CalendarEventVisual[]\n}\n\ninterface Node {\n  parent: Node | null\n  sibling: boolean\n  index: number\n  visual: CalendarEventVisual\n  start: number\n  end: number\n  children: Node[]\n}\n\nconst FULL_WIDTH = 100\n\nconst DEFAULT_OFFSET = 5\n\nconst WIDTH_MULTIPLIER = 1.7\n\n/**\n * Variation of column mode where events can be stacked. The priority of this\n * mode is to stack events together taking up the least amount of space while\n * trying to ensure the content of the event is always visible as well as its\n * start and end. A sibling column has intersecting event content and must be\n * placed beside each other. Non-sibling columns are offset by 5% from the\n * previous column. The width is scaled by 1.7 so the events overlap and\n * whitespace is reduced. If there is a hole in columns the event width is\n * scaled up so it intersects with the next column. The columns have equal\n * width in the space they are given. If the event doesn't have any to the\n * right of it that intersect with it's content it's right side is extended\n * to the right side.\n */\n\nexport const stack: CalendarEventOverlapMode = (events, firstWeekday, overlapThreshold) => {\n  const handler = getOverlapGroupHandler(firstWeekday)\n\n  // eslint-disable-next-line max-statements\n  return (day, dayEvents, timed, reset) => {\n    if (!timed) {\n      return handler.getVisuals(day, dayEvents, timed, reset)\n    }\n\n    const dayStart = getTimestampIdentifier(day)\n    const visuals = getVisuals(dayEvents, dayStart)\n    const groups = getGroups(visuals, dayStart)\n\n    for (const group of groups) {\n      const nodes: Node[] = []\n\n      for (const visual of group.visuals) {\n        const child = getNode(visual, dayStart)\n        const index = getNextIndex(child, nodes)\n\n        if (index === false) {\n          const parent = getParent(child, nodes)\n          if (parent) {\n            child.parent = parent\n            child.sibling = hasOverlap(child.start, child.end, parent.start, addTime(parent.start, overlapThreshold))\n            child.index = parent.index + 1\n            parent.children.push(child)\n          }\n        } else {\n          const [parent] = getOverlappingRange(child, nodes, index - 1, index - 1)\n          const children = getOverlappingRange(child, nodes, index + 1, index + nodes.length, true)\n\n          child.children = children\n          child.index = index\n\n          if (parent) {\n            child.parent = parent\n            child.sibling = hasOverlap(child.start, child.end, parent.start, addTime(parent.start, overlapThreshold))\n            parent.children.push(child)\n          }\n\n          for (const grand of children) {\n            if (grand.parent === parent) {\n              grand.parent = child\n            }\n\n            const grandNext = grand.index - child.index <= 1\n            if (grandNext && child.sibling &&\n              hasOverlap(child.start, addTime(child.start, overlapThreshold), grand.start, grand.end)) {\n              grand.sibling = true\n            }\n          }\n        }\n\n        nodes.push(child)\n      }\n\n      calculateBounds(nodes, overlapThreshold)\n    }\n\n    visuals.sort((a, b) => (a.left - b.left) || (a.event.startTimestampIdentifier - b.event.startTimestampIdentifier))\n\n    return visuals\n  }\n}\n\nfunction calculateBounds (nodes: Node[], overlapThreshold: number) {\n  for (const node of nodes) {\n    const { visual, parent } = node\n    const columns = getMaxChildIndex(node) + 1\n    const spaceLeft = parent ? parent.visual.left : 0\n    const spaceWidth = FULL_WIDTH - spaceLeft\n    const offset = Math.min(DEFAULT_OFFSET, FULL_WIDTH / columns)\n    const columnWidthMultiplier = getColumnWidthMultiplier(node, nodes)\n    const columnOffset = spaceWidth / (columns - node.index + 1)\n    const columnWidth = spaceWidth / (columns - node.index + (node.sibling ? 1 : 0)) * columnWidthMultiplier\n\n    if (parent) {\n      visual.left = node.sibling\n        ? spaceLeft + columnOffset\n        : spaceLeft + offset\n    }\n\n    visual.width = hasFullWidth(node, nodes, overlapThreshold)\n      ? FULL_WIDTH - visual.left\n      : Math.min(FULL_WIDTH - visual.left, columnWidth * WIDTH_MULTIPLIER)\n  }\n}\n\nfunction getColumnWidthMultiplier (node: Node, nodes: Node[]): number {\n  if (!node.children.length) {\n    return 1\n  }\n\n  const maxColumn = node.index + nodes.length\n  const minColumn = node.children.reduce((min, c) => Math.min(min, c.index), maxColumn)\n\n  return minColumn - node.index\n}\n\nfunction getOverlappingIndices (node: Node, nodes: Node[]): number[] {\n  const indices: number[] = []\n  for (const other of nodes) {\n    if (hasOverlap(node.start, node.end, other.start, other.end)) {\n      indices.push(other.index)\n    }\n  }\n  return indices\n}\n\nfunction getNextIndex (node: Node, nodes: Node[]): number | false {\n  const indices = getOverlappingIndices(node, nodes)\n  indices.sort()\n\n  for (let i = 0; i < indices.length; i++) {\n    if (i < indices[i]) {\n      return i\n    }\n  }\n  return false\n}\n\nfunction getOverlappingRange (node: Node, nodes: Node[], indexMin: number, indexMax: number, returnFirstColumn = false): Node[] {\n  const overlapping: Node[] = []\n  for (const other of nodes) {\n    if (other.index >= indexMin && other.index <= indexMax && hasOverlap(node.start, node.end, other.start, other.end)) {\n      overlapping.push(other)\n    }\n  }\n  if (returnFirstColumn && overlapping.length > 0) {\n    const first = overlapping.reduce((min, n) => Math.min(min, n.index), overlapping[0].index)\n    return overlapping.filter(n => n.index === first)\n  }\n  return overlapping\n}\n\nfunction getParent (node: Node, nodes: Node[]): Node | null {\n  let parent: Node | null = null\n  for (const other of nodes) {\n    if (hasOverlap(node.start, node.end, other.start, other.end) && (parent === null || other.index > parent.index)) {\n      parent = other\n    }\n  }\n  return parent\n}\n\nfunction hasFullWidth (node: Node, nodes: Node[], overlapThreshold: number): boolean {\n  for (const other of nodes) {\n    if (other !== node &&\n      other.index > node.index &&\n      hasOverlap(node.start, addTime(node.start, overlapThreshold), other.start, other.end)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction getGroups (visuals: CalendarEventVisual[], dayStart: number): Group[] {\n  const groups: Group[] = []\n\n  for (const visual of visuals) {\n    const [start, end] = getNormalizedRange(visual.event, dayStart)\n    let added = false\n\n    for (const group of groups) {\n      if (hasOverlap(start, end, group.start, group.end)) {\n        group.visuals.push(visual)\n        group.end = Math.max(group.end, end)\n        added = true\n        break\n      }\n    }\n\n    if (!added) {\n      groups.push({ start, end, visuals: [visual] })\n    }\n  }\n\n  return groups\n}\n\nfunction getNode (visual: CalendarEventVisual, dayStart: number): Node {\n  const [start, end] = getNormalizedRange(visual.event, dayStart)\n\n  return {\n    parent: null,\n    sibling: true,\n    index: 0,\n    visual,\n    start,\n    end,\n    children: [],\n  }\n}\n\nfunction getMaxChildIndex (node: Node): number {\n  let max = node.index\n  for (const child of node.children) {\n    const childMax = getMaxChildIndex(child)\n    if (childMax > max) {\n      max = childMax\n    }\n  }\n  return max\n}\n\nfunction addTime (identifier: number, minutes: number): number {\n  const removeMinutes = identifier % 100\n  const totalMinutes = removeMinutes + minutes\n  const addHours = Math.floor(totalMinutes / 60)\n  const addMinutes = totalMinutes % 60\n\n  return identifier - removeMinutes + addHours * 100 + addMinutes\n}\n"]},"metadata":{},"sourceType":"script"}