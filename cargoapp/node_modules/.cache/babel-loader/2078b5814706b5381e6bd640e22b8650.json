{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.object.keys.js\");\n\nrequire(\"core-js/modules/es.symbol.js\");\n\nrequire(\"core-js/modules/es.array.filter.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor.js\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptors.js\");\n\nrequire(\"core-js/modules/es.array.flat.js\");\n\nrequire(\"core-js/modules/es.array.unscopables.flat.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"../../../src/components/VExpansionPanel/VExpansionPanel.sass\");\n\nvar _VItemGroup = require(\"../VItemGroup/VItemGroup\");\n\nvar _console = require(\"../../util/console\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* @vue/component */\n\n\nvar _default = _VItemGroup.BaseItemGroup.extend({\n  name: 'v-expansion-panels',\n  provide: function provide() {\n    return {\n      expansionPanels: this\n    };\n  },\n  props: {\n    accordion: Boolean,\n    disabled: Boolean,\n    flat: Boolean,\n    hover: Boolean,\n    focusable: Boolean,\n    inset: Boolean,\n    popout: Boolean,\n    readonly: Boolean,\n    tile: Boolean\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread(_objectSpread({}, _VItemGroup.BaseItemGroup.options.computed.classes.call(this)), {}, {\n        'v-expansion-panels': true,\n        'v-expansion-panels--accordion': this.accordion,\n        'v-expansion-panels--flat': this.flat,\n        'v-expansion-panels--hover': this.hover,\n        'v-expansion-panels--focusable': this.focusable,\n        'v-expansion-panels--inset': this.inset,\n        'v-expansion-panels--popout': this.popout,\n        'v-expansion-panels--tile': this.tile\n      });\n    }\n  },\n  created: function created() {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('expand')) {\n      (0, _console.breaking)('expand', 'multiple', this);\n    }\n    /* istanbul ignore next */\n\n\n    if (Array.isArray(this.value) && this.value.length > 0 && typeof this.value[0] === 'boolean') {\n      (0, _console.breaking)(':value=\"[true, false, true]\"', ':value=\"[0, 2]\"', this);\n    }\n  },\n  methods: {\n    updateItem: function updateItem(item, index) {\n      var value = this.getValue(item, index);\n      var nextValue = this.getValue(item, index + 1);\n      item.isActive = this.toggleMethod(value);\n      item.nextIsActive = this.toggleMethod(nextValue);\n    }\n  }\n});\n\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACAA;;AAGA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;eACeC,0BAAcC,MAAd,CAAqB;EAClCC,IAAI,EAAE,oBAD4B;EAGlCC,OAHkC,qBAG3B;IACL,OAAO;MACLC,eAAe,EAAE;IADZ,CAAP;EAJgC;EASlCC,KAAK,EAAE;IACLC,SAAS,EAAEC,OADN;IAELC,QAAQ,EAAED,OAFL;IAGLE,IAAI,EAAEF,OAHD;IAILG,KAAK,EAAEH,OAJF;IAKLI,SAAS,EAAEJ,OALN;IAMLK,KAAK,EAAEL,OANF;IAOLM,MAAM,EAAEN,OAPH;IAQLO,QAAQ,EAAEP,OARL;IASLQ,IAAI,EAAER;EATD,CAT2B;EAqBlCS,QAAQ,EAAE;IACRC,OADQ,qBACD;MACL,uCACKjB,0BAAckB,OAAd,CAAsBF,QAAtB,CAA+BC,OAA/B,CAAuCE,IAAvC,CAA4C,IAA5C,CADL;QAEE,sBAAsB,IAFxB;QAGE,iCAAiC,KAAKb,SAHxC;QAIE,4BAA4B,KAAKG,IAJnC;QAKE,6BAA6B,KAAKC,KALpC;QAME,iCAAiC,KAAKC,SANxC;QAOE,6BAA6B,KAAKC,KAPpC;QAQE,8BAA8B,KAAKC,MARrC;QASE,4BAA4B,KAAKE;MATnC;IAWD;EAbO,CArBwB;EAqClCK,OArCkC,qBAqC3B;IACL;IACA,IAAI,KAAKC,MAAL,CAAYC,cAAZ,CAA2B,QAA3B,CAAJ,EAA0C;MACxC,uBAAS,QAAT,EAAmB,UAAnB,EAA+B,IAA/B;IACD;IAED;;;IACA,IACEC,KAAK,CAACC,OAAN,CAAc,KAAKC,KAAnB,KACA,KAAKA,KAAL,CAAWC,MAAX,GAAoB,CADpB,IAEA,OAAO,KAAKD,KAAL,CAAW,CAAX,CAAP,KAAyB,SAH3B,EAIE;MACA,uBAAS,8BAAT,EAAyC,iBAAzC,EAA4D,IAA5D;IACD;EAlD+B;EAqDlCE,OAAO,EAAE;IACPC,UADO,sBACKC,IADL,EACwDC,KADxD,EACqE;MAC1E,IAAML,KAAK,GAAG,KAAKM,QAAL,CAAcF,IAAd,EAAoBC,KAApB,CAAd;MACA,IAAME,SAAS,GAAG,KAAKD,QAAL,CAAcF,IAAd,EAAoBC,KAAK,GAAG,CAA5B,CAAlB;MAEAD,IAAI,CAACI,QAAL,GAAgB,KAAKC,YAAL,CAAkBT,KAAlB,CAAhB;MACAI,IAAI,CAACM,YAAL,GAAoB,KAAKD,YAAL,CAAkBF,SAAlB,CAApB;IACD;EAPM;AArDyB,CAArB","names":["require","_VItemGroup","extend","name","provide","expansionPanels","props","accordion","Boolean","disabled","flat","hover","focusable","inset","popout","readonly","tile","computed","classes","options","call","created","$attrs","hasOwnProperty","Array","isArray","value","length","methods","updateItem","item","index","getValue","nextValue","isActive","toggleMethod","nextIsActive"],"sourceRoot":"","sources":["../../../src/components/VExpansionPanel/VExpansionPanels.ts"],"sourcesContent":["// Styles\nimport './VExpansionPanel.sass'\n\n// Components\nimport { BaseItemGroup, GroupableInstance } from '../VItemGroup/VItemGroup'\nimport VExpansionPanel from './VExpansionPanel'\n\n// Utilities\nimport { breaking } from '../../util/console'\n\n// Types\ninterface VExpansionPanelInstance extends InstanceType<typeof VExpansionPanel> {}\n\n/* @vue/component */\nexport default BaseItemGroup.extend({\n  name: 'v-expansion-panels',\n\n  provide (): object {\n    return {\n      expansionPanels: this,\n    }\n  },\n\n  props: {\n    accordion: Boolean,\n    disabled: Boolean,\n    flat: Boolean,\n    hover: Boolean,\n    focusable: Boolean,\n    inset: Boolean,\n    popout: Boolean,\n    readonly: Boolean,\n    tile: Boolean,\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...BaseItemGroup.options.computed.classes.call(this),\n        'v-expansion-panels': true,\n        'v-expansion-panels--accordion': this.accordion,\n        'v-expansion-panels--flat': this.flat,\n        'v-expansion-panels--hover': this.hover,\n        'v-expansion-panels--focusable': this.focusable,\n        'v-expansion-panels--inset': this.inset,\n        'v-expansion-panels--popout': this.popout,\n        'v-expansion-panels--tile': this.tile,\n      }\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('expand')) {\n      breaking('expand', 'multiple', this)\n    }\n\n    /* istanbul ignore next */\n    if (\n      Array.isArray(this.value) &&\n      this.value.length > 0 &&\n      typeof this.value[0] === 'boolean'\n    ) {\n      breaking(':value=\"[true, false, true]\"', ':value=\"[0, 2]\"', this)\n    }\n  },\n\n  methods: {\n    updateItem (item: GroupableInstance & VExpansionPanelInstance, index: number) {\n      const value = this.getValue(item, index)\n      const nextValue = this.getValue(item, index + 1)\n\n      item.isActive = this.toggleMethod(value)\n      item.nextIsActive = this.toggleMethod(nextValue)\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"script"}