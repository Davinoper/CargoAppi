{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.number.constructor.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateNumber = validateNumber;\nexports.validateWeekdays = validateWeekdays;\nexports.default = void 0;\n\nvar _timestamp = require(\"./timestamp\");\n\nvar _modes = require(\"../modes\");\n\nvar _default2 = {\n  base: {\n    start: {\n      type: [String, Number, Date],\n      validate: _timestamp.validateTimestamp,\n      default: function _default() {\n        return (0, _timestamp.parseDate)(new Date()).date;\n      }\n    },\n    end: {\n      type: [String, Number, Date],\n      validate: _timestamp.validateTimestamp\n    },\n    weekdays: {\n      type: [Array, String],\n      default: function _default() {\n        return [0, 1, 2, 3, 4, 5, 6];\n      },\n      validate: validateWeekdays\n    },\n    hideHeader: {\n      type: Boolean\n    },\n    shortWeekdays: {\n      type: Boolean,\n      default: true\n    },\n    weekdayFormat: {\n      type: Function,\n      default: null\n    },\n    dayFormat: {\n      type: Function,\n      default: null\n    }\n  },\n  intervals: {\n    maxDays: {\n      type: Number,\n      default: 7\n    },\n    shortIntervals: {\n      type: Boolean,\n      default: true\n    },\n    intervalHeight: {\n      type: [Number, String],\n      default: 48,\n      validate: validateNumber\n    },\n    intervalWidth: {\n      type: [Number, String],\n      default: 60,\n      validate: validateNumber\n    },\n    intervalMinutes: {\n      type: [Number, String],\n      default: 60,\n      validate: validateNumber\n    },\n    firstInterval: {\n      type: [Number, String],\n      default: 0,\n      validate: validateNumber\n    },\n    firstTime: {\n      type: [Number, String, Object],\n      validate: _timestamp.validateTime\n    },\n    intervalCount: {\n      type: [Number, String],\n      default: 24,\n      validate: validateNumber\n    },\n    intervalFormat: {\n      type: Function,\n      default: null\n    },\n    intervalStyle: {\n      type: Function,\n      default: null\n    },\n    showIntervalLabel: {\n      type: Function,\n      default: null\n    }\n  },\n  weeks: {\n    localeFirstDayOfYear: {\n      type: [String, Number],\n      default: 0\n    },\n    minWeeks: {\n      validate: validateNumber,\n      default: 1\n    },\n    shortMonths: {\n      type: Boolean,\n      default: true\n    },\n    showMonthOnFirst: {\n      type: Boolean,\n      default: true\n    },\n    showWeek: Boolean,\n    monthFormat: {\n      type: Function,\n      default: null\n    }\n  },\n  calendar: {\n    type: {\n      type: String,\n      default: 'month'\n    },\n    value: {\n      type: [String, Number, Date],\n      validate: _timestamp.validateTimestamp\n    }\n  },\n  category: {\n    categories: {\n      type: [Array, String],\n      default: ''\n    },\n    categoryText: {\n      type: [String, Function]\n    },\n    categoryHideDynamic: {\n      type: Boolean\n    },\n    categoryShowAll: {\n      type: Boolean\n    },\n    categoryForInvalid: {\n      type: String,\n      default: ''\n    },\n    categoryDays: {\n      type: [Number, String],\n      default: 1,\n      validate: function validate(x) {\n        return isFinite(parseInt(x)) && parseInt(x) > 0;\n      }\n    }\n  },\n  events: {\n    events: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    eventStart: {\n      type: String,\n      default: 'start'\n    },\n    eventEnd: {\n      type: String,\n      default: 'end'\n    },\n    eventTimed: {\n      type: [String, Function],\n      default: 'timed'\n    },\n    eventCategory: {\n      type: [String, Function],\n      default: 'category'\n    },\n    eventHeight: {\n      type: Number,\n      default: 20\n    },\n    eventColor: {\n      type: [String, Function],\n      default: 'primary'\n    },\n    eventTextColor: {\n      type: [String, Function],\n      default: 'white'\n    },\n    eventName: {\n      type: [String, Function],\n      default: 'name'\n    },\n    eventOverlapThreshold: {\n      type: [String, Number],\n      default: 60\n    },\n    eventOverlapMode: {\n      type: [String, Function],\n      default: 'stack',\n      validate: function validate(mode) {\n        return mode in _modes.CalendarEventOverlapModes || typeof mode === 'function';\n      }\n    },\n    eventMore: {\n      type: Boolean,\n      default: true\n    },\n    eventMoreText: {\n      type: String,\n      default: '$vuetify.calendar.moreEvents'\n    },\n    eventRipple: {\n      type: [Boolean, Object],\n      default: null\n    },\n    eventMarginBottom: {\n      type: Number,\n      default: 1\n    }\n  }\n};\nexports.default = _default2;\n\nfunction validateNumber(input) {\n  return isFinite(parseInt(input));\n}\n\nfunction validateWeekdays(input) {\n  if (typeof input === 'string') {\n    input = input.split(',');\n  }\n\n  if (Array.isArray(input)) {\n    var ints = input.map(function (x) {\n      return parseInt(x);\n    });\n\n    if (ints.length > _timestamp.DAYS_IN_WEEK || ints.length === 0) {\n      return false;\n    }\n\n    var visited = {};\n    var wrapped = false;\n\n    for (var i = 0; i < ints.length; i++) {\n      var x = ints[i];\n\n      if (!isFinite(x) || x < 0 || x >= _timestamp.DAYS_IN_WEEK) {\n        return false;\n      }\n\n      if (i > 0) {\n        var d = x - ints[i - 1];\n\n        if (d < 0) {\n          if (wrapped) {\n            return false;\n          }\n\n          wrapped = true;\n        } else if (d === 0) {\n          return false;\n        }\n      }\n\n      if (visited[x]) {\n        return false;\n      }\n\n      visited[x] = true;\n    }\n\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"mappings":"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","names":["base","start","type","String","Number","Date","validate","_timestamp","default","date","end","weekdays","Array","validateWeekdays","hideHeader","Boolean","shortWeekdays","weekdayFormat","Function","dayFormat","intervals","maxDays","shortIntervals","intervalHeight","validateNumber","intervalWidth","intervalMinutes","firstInterval","firstTime","Object","intervalCount","intervalFormat","intervalStyle","showIntervalLabel","weeks","localeFirstDayOfYear","minWeeks","shortMonths","showMonthOnFirst","showWeek","monthFormat","calendar","value","category","categories","categoryText","categoryHideDynamic","categoryShowAll","categoryForInvalid","categoryDays","x","isFinite","parseInt","events","eventStart","eventEnd","eventTimed","eventCategory","eventHeight","eventColor","eventTextColor","eventName","eventOverlapThreshold","eventOverlapMode","mode","_modes","eventMore","eventMoreText","eventRipple","eventMarginBottom","input","split","isArray","ints","map","length","visited","wrapped","i","d"],"sourceRoot":"","sources":["../../../../src/components/VCalendar/util/props.ts"],"sourcesContent":["\nimport { validateTimestamp, parseDate, DAYS_IN_WEEK, validateTime } from './timestamp'\nimport { PropType } from 'vue'\nimport { CalendarEvent, CalendarFormatter, CalendarTimestamp, CalendarEventOverlapMode, CalendarEventNameFunction, CalendarEventColorFunction, CalendarEventCategoryFunction, CalendarEventTimedFunction, CalendarCategoryTextFunction, CalendarCategory } from 'vuetify/types'\nimport { CalendarEventOverlapModes } from '../modes'\nimport { PropValidator } from 'vue/types/options'\n\nexport default {\n  base: {\n    start: {\n      type: [String, Number, Date],\n      validate: validateTimestamp,\n      default: () => parseDate(new Date()).date,\n    },\n    end: {\n      type: [String, Number, Date],\n      validate: validateTimestamp,\n    },\n    weekdays: {\n      type: [Array, String] as PropType<number[] | string>,\n      default: () => [0, 1, 2, 3, 4, 5, 6],\n      validate: validateWeekdays,\n    },\n    hideHeader: {\n      type: Boolean,\n    },\n    shortWeekdays: {\n      type: Boolean,\n      default: true,\n    },\n    weekdayFormat: {\n      type: Function as PropType<CalendarFormatter>,\n      default: null,\n    },\n    dayFormat: {\n      type: Function as PropType<CalendarFormatter>,\n      default: null,\n    },\n  },\n  intervals: {\n    maxDays: {\n      type: Number,\n      default: 7,\n    },\n    shortIntervals: {\n      type: Boolean,\n      default: true,\n    },\n    intervalHeight: {\n      type: [Number, String],\n      default: 48,\n      validate: validateNumber,\n    },\n    intervalWidth: {\n      type: [Number, String],\n      default: 60,\n      validate: validateNumber,\n    },\n    intervalMinutes: {\n      type: [Number, String],\n      default: 60,\n      validate: validateNumber,\n    },\n    firstInterval: {\n      type: [Number, String],\n      default: 0,\n      validate: validateNumber,\n    },\n    firstTime: {\n      type: [Number, String, Object],\n      validate: validateTime,\n    },\n    intervalCount: {\n      type: [Number, String],\n      default: 24,\n      validate: validateNumber,\n    },\n    intervalFormat: {\n      type: Function as PropType<CalendarFormatter>,\n      default: null,\n    },\n    intervalStyle: {\n      type: Function as PropType<(interval: CalendarTimestamp) => object>,\n      default: null,\n    },\n    showIntervalLabel: {\n      type: Function as PropType<(interval: CalendarTimestamp) => boolean>,\n      default: null,\n    },\n  },\n  weeks: {\n    localeFirstDayOfYear: {\n      type: [String, Number],\n      default: 0,\n    },\n    minWeeks: {\n      validate: validateNumber,\n      default: 1,\n    },\n    shortMonths: {\n      type: Boolean,\n      default: true,\n    },\n    showMonthOnFirst: {\n      type: Boolean,\n      default: true,\n    },\n    showWeek: Boolean,\n    monthFormat: {\n      type: Function as PropType<CalendarFormatter>,\n      default: null,\n    },\n  },\n  calendar: {\n    type: {\n      type: String,\n      default: 'month',\n    },\n    value: {\n      type: [String, Number, Date] as PropType<string | number | Date>,\n      validate: validateTimestamp,\n    },\n  },\n  category: {\n    categories: {\n      type: [Array, String] as PropType<CalendarCategory[] | string>,\n      default: '',\n    },\n    categoryText: {\n      type: [String, Function] as PropType<string | CalendarCategoryTextFunction>,\n    },\n    categoryHideDynamic: {\n      type: Boolean,\n    },\n    categoryShowAll: {\n      type: Boolean,\n    },\n    categoryForInvalid: {\n      type: String,\n      default: '',\n    },\n    categoryDays: {\n      type: [Number, String],\n      default: 1,\n      validate: (x: any) => isFinite(parseInt(x)) && parseInt(x) > 0,\n    },\n  },\n  events: {\n    events: {\n      type: Array,\n      default: () => [],\n    } as PropValidator<CalendarEvent[]>,\n    eventStart: {\n      type: String,\n      default: 'start',\n    },\n    eventEnd: {\n      type: String,\n      default: 'end',\n    },\n    eventTimed: {\n      type: [String, Function] as PropType<string | CalendarEventTimedFunction>,\n      default: 'timed',\n    },\n    eventCategory: {\n      type: [String, Function] as PropType<string | CalendarEventCategoryFunction>,\n      default: 'category',\n    },\n    eventHeight: {\n      type: Number,\n      default: 20,\n    },\n    eventColor: {\n      type: [String, Function] as PropType<string | CalendarEventColorFunction>,\n      default: 'primary',\n    },\n    eventTextColor: {\n      type: [String, Function] as PropType<string | CalendarEventColorFunction>,\n      default: 'white',\n    },\n    eventName: {\n      type: [String, Function] as PropType<string | CalendarEventNameFunction>,\n      default: 'name',\n    },\n    eventOverlapThreshold: {\n      type: [String, Number],\n      default: 60,\n    },\n    eventOverlapMode: {\n      type: [String, Function],\n      default: 'stack',\n      validate: (mode: any) => mode in CalendarEventOverlapModes || typeof mode === 'function',\n    } as PropValidator<'stack' | 'column' | CalendarEventOverlapMode>,\n    eventMore: {\n      type: Boolean,\n      default: true,\n    },\n    eventMoreText: {\n      type: String,\n      default: '$vuetify.calendar.moreEvents',\n    },\n    eventRipple: {\n      type: [Boolean, Object],\n      default: null,\n    },\n    eventMarginBottom: {\n      type: Number,\n      default: 1,\n    },\n  },\n}\n\nexport function validateNumber (input: any): boolean {\n  return isFinite(parseInt(input))\n}\n\nexport function validateWeekdays (input: string | (number | string)[]): boolean {\n  if (typeof input === 'string') {\n    input = input.split(',')\n  }\n\n  if (Array.isArray(input)) {\n    const ints = input.map(x => parseInt(x))\n\n    if (ints.length > DAYS_IN_WEEK || ints.length === 0) {\n      return false\n    }\n\n    const visited: Record<number, boolean> = {}\n    let wrapped = false\n\n    for (let i = 0; i < ints.length; i++) {\n      const x = ints[i]\n\n      if (!isFinite(x) || x < 0 || x >= DAYS_IN_WEEK) {\n        return false\n      }\n\n      if (i > 0) {\n        const d = x - ints[i - 1]\n        if (d < 0) {\n          if (wrapped) {\n            return false\n          }\n          wrapped = true\n        } else if (d === 0) {\n          return false\n        }\n      }\n\n      if (visited[x]) {\n        return false\n      }\n      visited[x] = true\n    }\n\n    return true\n  }\n\n  return false\n}\n"]},"metadata":{},"sourceType":"script"}