{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nrequire(\"core-js/modules/es.array.from.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nrequire(\"core-js/modules/es.symbol.js\");\n\nrequire(\"core-js/modules/es.symbol.description.js\");\n\nrequire(\"core-js/modules/es.symbol.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _pad = _interopRequireDefault(require(\"./pad\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar _default = function _default(dateString, type) {\n  var _dateString$split = dateString.split('-'),\n      _dateString$split2 = _slicedToArray(_dateString$split, 3),\n      year = _dateString$split2[0],\n      _dateString$split2$ = _dateString$split2[1],\n      month = _dateString$split2$ === void 0 ? 1 : _dateString$split2$,\n      _dateString$split2$2 = _dateString$split2[2],\n      date = _dateString$split2$2 === void 0 ? 1 : _dateString$split2$2;\n\n  return \"\".concat(year, \"-\").concat((0, _pad.default)(month), \"-\").concat((0, _pad.default)(date)).substr(0, {\n    date: 10,\n    month: 7,\n    year: 4\n  }[type]);\n};\n\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAEe,kBAACA,UAAD,EAAqBC,IAArB,EAAgE;EAAA,wBACzCD,UAAU,CAACE,KAAX,CAAiB,GAAjB,CADyC;EAAA;EAAA,IACtEC,IADsE;EAAA;EAAA,IAChEC,KADgE,oCACxD,CADwD;EAAA;EAAA,IACrDC,IADqD,qCAC9C,CAD8C;;EAE7E,OAAO,UAAGF,IAAH,cAAW,kBAAIC,KAAJ,CAAX,cAAyB,kBAAIC,IAAJ,CAAzB,EAAqCC,MAArC,CAA4C,CAA5C,EAA+C;IAAED,IAAI,EAAE,EAAR;IAAYD,KAAK,EAAE,CAAnB;IAAsBD,IAAI,EAAE;EAA5B,EAAgCF,IAAhC,CAA/C,CAAP","names":["dateString","type","split","year","month","date","substr"],"sourceRoot":"","sources":["../../../../src/components/VDatePicker/util/sanitizeDateString.ts"],"sourcesContent":["// Adds leading zero to month/day if necessary, returns 'YYYY' if type = 'year',\n// 'YYYY-MM' if 'month' and 'YYYY-MM-DD' if 'date'\nimport pad from './pad'\n\nexport default (dateString: string, type: 'date' | 'month' | 'year'): string => {\n  const [year, month = 1, date = 1] = dateString.split('-')\n  return `${year}-${pad(month)}-${pad(date)}`.substr(0, { date: 10, month: 7, year: 4 }[type])\n}\n"]},"metadata":{},"sourceType":"script"}